/*
This code is written by kerukuro for cppcrypto library (http://cppcrypto.sourceforge.net/)
and released into public domain.
*/
//#define CPPCRYPTO_DEBUG

#include <memory.h>
#include "kalyna.h"
#include "portability.h"

namespace cppcrypto
{
	extern const uint64_t KUPYNA_T[8][256];

	static uint64_t IT[8][256] = {
		{
			0x7826942b9f5f8a9a, 0x210f43c934970c53, 0x5f028fdd9d0551b8, 0x14facd82b494c83b, 0x2b72ab886edd68c0, 0xa6a87e5bff19d9b4, 0xa29ae571db6443ea, 0x039b2c911be8e5b6,
			0xd9275dcb5fd32cc6, 0x10c856a890e95265, 0x7d96e085b27ab85d, 0x31c71561a47e5e36, 0x74702455f3d83978, 0xe8e048aafbad72f0, 0x9b39db4437e03460, 0x75f2cbd1fa8091e1,
			0x1ab5bee9caa336f6, 0x8395a6b8eff34fb9, 0x64b872fd63316b1d, 0xe1068c7aba0ff3d5, 0xeecb1095cd60a581, 0xbc1dc0b235baef42, 0xf04c355623be0929, 0xb252b3d94b8d118f,
			0x18ac7dfcd8137bd9, 0xbbb477090a2f90aa, 0x8625d216c2d67d7e, 0x66a1b1e871812632, 0x6f4775383023a717, 0x92df1f947642b545, 0xe962a72ef2f5da69, 0x8bf18deca7096605,
			0xc86de4e7c662d63a, 0xaafece25939e6a56, 0x5c99a34c86edb40e, 0x52d6d027f8da4ac3, 0x6b75ee12145e3d49, 0x54fd8818ce179db2, 0xa3180af5d23ceb73, 0xbe0403a7270aa26d,
			0xfe03463d5d89f7e4, 0xf1cedad22ae6a1b0, 0xd143769f1729057a, 0xc7a07808b10d806e, 0xfc1a85284f39bacb, 0xa4b1bd4eeda9949b, 0x0bff07c55312cc0a, 0xef49ff11c4380d18,
			0xc392e32295701a30, 0x7f8f2390a0caf572, 0x62932ac255fcbc6c, 0xc9ef0b63cf3a7ea3, 0xf9aaf186621c880c, 0x818c65adfd430296, 0x325c39f0bf96bb80, 0x0c56b07e6c87b3e2,
			0x4bf8425f29919983, 0xb5fb046274186e67, 0x462c1da54c4e82f8, 0x90c6dc8164f2f86a, 0xf8281e026b442095, 0x6af701961d0695d0, 0x5766a489d5ff7804, 0xf3d719c73856ec9f,
			0xad57799eac0b15be, 0x1b37516dc3fb9e6f, 0xc009cfb38e98ff86, 0x9576a82f49d7caad, 0xe6af3bc1859a8c3d, 0x208dac4d3dcfa4ca, 0x8ddad5d391c4b174, 0x8e41f9428a2c54c2,
			0x6cdc59a92bcb42a1, 0xe53417509e72698b, 0xd0c1991b1e71ade3, 0x8217493ce6abe720, 0xd4f302313a0c37bd, 0x5e806059945df921, 0x73d993eecc4d4690, 0xf5fc41f80e9b3bee,
			0x13537a398b01b7d3, 0x53543fa3f182e25a, 0x2d59f3b75810bfb1, 0x35f58e4b8003c468, 0x886aa17dbce183b3, 0x4c51f5e41604e66b, 0x98a2f7d52c08d1d6, 0xa101c9e0c08ca65c,
			0x4007459a7a835589, 0xcc5f7fcde21f4c64, 0xa965e2b488768fe0, 0x12d195bd82591f4a, 0x2f4030a24aa0f29e, 0x56e44b0ddca7d09d, 0x914433056daa50f3, 0x37ec4d5e92b38947,
			0xe31f4f6fa8bfbefa, 0x50cf1332ea6a07ec, 0x6d5eb62d2293ea38, 0x09e6c4d041a28125, 0x8fc316c68374fc5b, 0x421e868f683318a6, 0xe08463feb3575b4c, 0x3821d1b1e5dcdf13,
			0xed503c04d6884037, 0xd35ab58a05994855, 0x976f6b3a5b678782, 0x6ec59abc397b0f8e, 0x5929d7e2abc886c9, 0xa53352cae4f13c02, 0x89e84ef9b5b92b2a, 0x1761e113af7c2d8d,
			0x28e9871975358d76, 0xdc97296572f61e01, 0x67235e6c78d98eab, 0x3d91a51fc8f9edd4, 0x68eec2830fb6d8ff, 0xfbb3329370acc523, 0x062b583f36cdd771, 0x15782206bdcc60a2,
			0x16e30e97a6248514, 0x79a47baf96072203, 0xf7e582ed1c2b76c1, 0xde8eea706046532e, 0xaf4eba8bbebb5891, 0x08642b5448fa29bc, 0x24bf376719b23e94, 0x231680dc2627417c,
			0x0dd45ffa65df1b7b, 0x1d1c0952f536491e, 0xff81a9b954d15f7d, 0x992018512550794f, 0x71c050fbdefd0bbf, 0xc18b203787c0571f, 0x253dd8e310ea960d, 0xeb7b643be0459746,
			0x0219c31512b04d2f, 0xc43b5499aae565d8, 0xeaf98bbfe91d3fdf, 0x3a3812a4f76c923c, 0x4dd31a601f5c4ef2, 0xa8e70d30812e2779, 0x800e8a29f41baa0f, 0x1c9ee6d6fc6ee187,
			0x5d1b4cc88fb51c97, 0x610806534e1459da, 0xf255f643310e4406, 0xd2d85a0e0cc1e0cc, 0x0182ef840958a899, 0x7e0dcc14a9925deb, 0x653a9d796a69c384, 0x4e4836f104b4ab44,
			0x4fcad9750dec03dd, 0xcddd9049eb47e4fd, 0x0e4f736b7e37fecd, 0x4185aa1e73dbfd10, 0x725b7c6ac515ee09, 0x8a736268ae51ce9c, 0xc5b9bb1da3bdcd41, 0x7bbdb8ba84b76f2c,
			0xdabc715a443bc970, 0xe29da0eba1e71663, 0x935df0107f1a1ddc, 0x608ae9d7474cf143, 0xd571edb533549f24, 0xa0832664c9d40ec5, 0xfd986aac46611252, 0x4435deb05efecfd7,
			0x0000000000000000, 0x2cdb1c3351481728, 0x94f447ab408f6234, 0x45b7313457a6674e, 0xb82f5b9811c7751c, 0x8c583a57989c19ed, 0xdd15c6e17baeb698, 0x696c2d0706ee7066,
			0x3f88660ada49a0fb, 0xf47eae7c07c39377, 0x05b074ae2d2532c7, 0xb3d05c5d42d5b916, 0x39a33e35ec84778a, 0x0fcd9cef776f5654, 0xacd5961aa553bd27, 0x5b3014f7b978cbe6,
			0x347761cf895b6cf1, 0xc622978cb85528f7, 0xb7e2c77766a82348, 0x77eb08c4e830dcce, 0xb9adb41c189fdd85, 0x114ab92c99b1fafc, 0x26a6f4720b0273bb, 0x1e8725c3eedeaca8,
			0x2af0440c6785c059, 0x04329b2a247d9a5e, 0xd7682ea021e4d20b, 0x7c140f01bb2210c4, 0x96ed84be523f2f1b, 0xca7427f2d4d29b15, 0x47aef22145162a61, 0xa72a91dff641712d,
			0x5ab2fb73b020637f, 0xcbf6c876dd8a338c, 0x6311c5465ca414f5, 0x07a9b7bb3f957fe8, 0xe72dd4458cc224a4, 0x9d12837b012de311, 0x843c1103d0663051, 0x0a7de8415a4a6493,
			0xd6eac12428bc7a92, 0x9c906cff08754b88, 0x7042bf7fd7a5a326, 0xbd9f2f363ce247db, 0xb66028f36ff08bd1, 0x192e9278d14bd340, 0x9f0b406e139dae3e, 0x1f05ca47e7860431,
			0x85befe87d93e98c8, 0x439c690b616bb03f, 0xba36988d03773833, 0x87a73d92cb8ed5e7, 0xaecc550fb7e3f008, 0xc2100ca69c28b2a9, 0x9abb34c03eb89cf9, 0x49e1814a3b21d4ac,
			0xecd2d380dfd0e8ae, 0x296b689d7c6d25ef, 0x3c134a9bc1a1454d, 0xcfc4535cf9f7a9d2, 0x557f679cc74f352b, 0xb479ebe67d40c6fe, 0xf6676d691573de58, 0x9e89afea1ac506a7,
			0xd8a5b24f568b845f, 0x48636ece32797c35, 0xdf0c05f4691efbb7, 0xe4b6f8d4972ac112, 0xfa31dd1779f46dba, 0xbf86ec232e520af4, 0x3e0a898ed3110862, 0x7a3f573e8defc7b5,
			0x27241bf6025adb22, 0x58ab3866a2902e50, 0x3bbafd20fe343aa5, 0x3045fae5ad26f6af, 0x2ec2df2643f85a07, 0x22946f582f7fe9e5, 0x366ea2da9beb21de, 0x4a7aaddb20c9311a,
			0xb1c99f485065f439, 0xb04b70cc593d5ca0, 0xab7c21a19ac6c2cf, 0x33ded674b6ce1319, 0xce46bcd8f0af014b, 0xdb3e9ede4d6361e9, 0x7669e740e1687457, 0x514dfcb6e332af75
		},
		{
			0x1f4f6fa8bfbefae3, 0xf0440c6785c0592a, 0x1dc0b235baef42bc, 0x22978cb85528f7c6, 0xcedad22ae6a1b0f1, 0x180af5d23ceb73a3, 0x946f582f7fe9e522, 0xe44b0ddca7d09d56,
			0x906cff08754b889c, 0x9f2f363ce247dbbd, 0xa1b1e87181263266, 0x21d1b1e5dcdf1338, 0x31dd1779f46dbafa, 0x4b70cc593d5ca0b0, 0xd719c73856ec9ff3, 0x8725c3eedeaca81e,
			0x71edb533549f24d5, 0x12837b012de3119d, 0x3dd8e310ea960d25, 0x29d7e2abc886c959, 0xb477090a2f90aabb, 0x45fae5ad26f6af30, 0x9ee6d6fc6ee1871c, 0xbefe87d93e98c885,
			0xe30e97a624851416, 0xd6d027f8da4ac352, 0xcc550fb7e3f008ae, 0x5ab58a05994855d3, 0x806059945df9215e, 0x82ef840958a89901, 0x4ab92c99b1fafc11, 0x281e026b442095f8,
			0x62a72ef2f5da69e9, 0x8b203787c0571fc1, 0x4f736b7e37fecd0e, 0xab3866a2902e5058, 0x6ea2da9beb21de36, 0xf447ab408f623494, 0x235e6c78d98eab67, 0x11c5465ca414f563,
			0xd31a601f5c4ef24d, 0xa2f7d52c08d1d698, 0x85aa1e73dbfd1041, 0xdc59a92bcb42a16c, 0x59f3b75810bfb12d, 0xe2c77766a82348b7, 0xb9bb1da3bdcd41c5, 0x96e085b27ab85d7d,
			0x99a34c86edb40e5c, 0x66a489d5ff780457, 0x95a6b8eff34fb983, 0x7f679cc74f352b55, 0x7de8415a4a64930a, 0x9b2c911be8e5b603, 0x4836f104b4ab444e, 0xdb1c33514817282c,
			0x15c6e17baeb698dd, 0xed84be523f2f1b96, 0xe1814a3b21d4ac49, 0x503c04d6884037ed, 0x4c355623be0929f0, 0x3b5499aae565d8c4, 0x0a898ed31108623e, 0xb074ae2d2532c705,
			0x028fdd9d0551b85f, 0xf58e4b8003c46835, 0x3352cae4f13c02a5, 0x6c2d0706ee706669, 0x7c21a19ac6c2cfab, 0x19c31512b04d2f02, 0xa6f4720b0273bb26, 0x05ca47e78604311f,
			0x46bcd8f0af014bce, 0x1e868f683318a642, 0x5c39f0bf96bb8032, 0x79ebe67d40c6feb4, 0xff07c55312cc0a0b, 0xaef22145162a6147, 0xc1991b1e71ade3d0, 0xded674b6ce131933,
			0x7aaddb20c9311a4a, 0x4dfcb6e332af7551, 0x6de4e7c662d63ac8, 0xbf376719b23e9424, 0x07459a7a83558940, 0xac7dfcd8137bd918, 0xdf1f947642b54592, 0x17493ce6abe72082,
			0xfc41f80e9b3beef5, 0xe70d30812e2779a8, 0xd993eecc4d469073, 0x65e2b488768fe0a9, 0xd2d380dfd0e8aeec, 0xe6c4d041a2812509, 0x068c7aba0ff3d5e1, 0x51f5e41604e66b4c,
			0x41f9428a2c54c28e, 0x537a398b01b7d313, 0x782206bdcc60a215, 0x89afea1ac506a79e, 0x8ae9d7474cf14360, 0xf6c876dd8a338ccb, 0x43769f1729057ad1, 0x8dac4d3dcfa4ca20,
			0xb7313457a6674e45, 0x2018512550794f99, 0xbb34c03eb89cf99a, 0xbafd20fe343aa53b, 0x03463d5d89f7e4fe, 0x42bf7fd7a5a32670, 0x3f573e8defc7b57a, 0xadb41c189fdd85b9,
			0xcad9750dec03dd4f, 0x0f43c934970c5321, 0x2f5b9811c7751cb8, 0xd85a0e0cc1e0ccd2, 0xe048aafbad72f0e8, 0xf18deca70966058b, 0xdd9049eb47e4fdcd, 0xa87e5bff19d9b4a6,
			0x5df0107f1a1ddc93, 0xd195bd82591f4a12, 0x0c05f4691efbb7df, 0x8463feb3575b4ce0, 0x55f643310e4406f2, 0xb6f8d4972ac112e4, 0x4030a24aa0f29e2f, 0xfd8818ce179db254,
			0x3c1103d066305184, 0x682ea021e4d20bd7, 0x81a9b954d15f7dff, 0x275dcb5fd32cc6d9, 0xfacd82b494c83b14, 0x4433056daa50f391, 0xe9871975358d7628, 0xeac12428bc7a92d6,
			0x1a85284f39bacbfc, 0xf8425f299199834b, 0x676d691573de58f6, 0xd05c5d42d5b916b3, 0x8eea706046532ede, 0xfb046274186e67b5, 0x134a9bc1a1454d3c, 0x57799eac0b15bead,
			0x241bf6025adb2227, 0x72ab886edd68c02b, 0x9ae571db6443eaa2, 0xc050fbdefd0bbf71, 0xa5b24f568b845fd8, 0xe84ef9b5b92b2a89, 0x6f6b3a5b67878297, 0xc6dc8164f2f86a90,
			0x7eae7c07c39377f4, 0x5eb62d2293ea386d, 0x8c65adfd43029681, 0x2dd4458cc224a4e7, 0xfece25939e6a56aa, 0xcd9cef776f56540f, 0xa33e35ec84778a39, 0xc2df2643f85a072e,
			0xbc715a443bc970da, 0xa07808b10d806ec7, 0x36988d03773833ba, 0x1680dc2627417c23, 0xcb1095cd60a581ee, 0xbdb8ba84b76f2c7b, 0x702455f3d8397874, 0x35deb05efecfd744,
			0x8f2390a0caf5727f, 0xb1bd4eeda9949ba4, 0x39db4437e034609b, 0xe582ed1c2b76c1f7, 0xc4535cf9f7a9d2cf, 0xb2fb73b020637f5a, 0x583a57989c19ed8c, 0x25d216c2d67d7e86,
			0x0806534e1459da61, 0x6b689d7c6d25ef29, 0x0dcc14a9925deb7e, 0xc99f485065f439b1, 0xa9b7bb3f957fe807, 0x2a91dff641712da7, 0x1c0952f536491e1d, 0x75ee12145e3d496b,
			0xf98bbfe91d3fdfea, 0x92e32295701a30c3, 0x3e9ede4d6361e9db, 0x76a82f49d7caad95, 0x9da0eba1e71663e2, 0x09cfb38e98ff86c0, 0x9c690b616bb03f43, 0xdad5d391c4b1748d,
			0x3812a4f76c923c3a, 0x5f7fcde21f4c64cc, 0x6aa17dbce183b388, 0xeec2830fb6d8ff68, 0x736268ae51ce9c8a, 0xa47baf9607220379, 0x543fa3f182e25a53, 0x4eba8bbebb5891af,
			0x2e9278d14bd34019, 0x69e740e168745776, 0x37516dc3fb9e6f1b, 0xb3329370acc523fb, 0x3a9d796a69c38465, 0x7761cf895b6cf134, 0x0000000000000000, 0x88660ada49a0fb3f,
			0xb5bee9caa336f61a, 0x5b7c6ac515ee0972, 0x52b3d94b8d118fb2, 0x329b2a247d9a5e04, 0x0e8a29f41baa0f80, 0x642b5448fa29bc08, 0x7b643be0459746eb, 0xd45ffa65df1b7b0d,
			0xeb08c4e830dcce77, 0xf2cbd1fa8091e175, 0xf302313a0c37bdd4, 0x91a51fc8f9edd43d, 0xef0b63cf3a7ea3c9, 0xc316c68374fc5b8f, 0x01c9e0c08ca65ca1, 0x3417509e72698be5,
			0x4775383023a7176f, 0x636ece32797c3548, 0x1b4cc88fb51c975d, 0x140f01bb2210c47c, 0x7427f2d4d29b15ca, 0xa73d92cb8ed5e787, 0xc71561a47e5e3631, 0xaaf186621c880cf9,
			0x6028f36ff08bd1b6, 0x97296572f61e01dc, 0xc59abc397b0f8e6e, 0xec4d5e92b3894737, 0xb872fd63316b1d64, 0xaf3bc1859a8c3de6, 0x0403a7270aa26dbe, 0x26942b9f5f8a9a78,
			0x86ec232e520af4bf, 0x49ff11c4380d18ef, 0xf701961d0695d06a, 0x56b07e6c87b3e20c, 0xd5961aa553bd27ac, 0x61e113af7c2d8d17, 0x100ca69c28b2a9c2, 0xcf1332ea6a07ec50,
			0xc856a890e9526510, 0x2b583f36cdd77106, 0x932ac255fcbc6c62, 0x0b406e139dae3e9f, 0x832664c9d40ec5a0, 0x3014f7b978cbe65b, 0x2c1da54c4e82f846, 0x986aac46611252fd
		},
		{
			0x679cc74f352b557f, 0x376719b23e9424bf, 0xcc14a9925deb7e0d, 0xb07e6c87b3e20c56, 0xa17dbce183b3886a, 0xee12145e3d496b75, 0x406e139dae3e9f0b, 0x942b9f5f8a9a7826,
			0xb24f568b845fd8a5, 0xdf2643f85a072ec2, 0x8c7aba0ff3d5e106, 0x0b63cf3a7ea3c9ef, 0x12a4f76c923c3a38, 0x8bbfe91d3fdfeaf9, 0x9278d14bd340192e, 0xca47e78604311f05,
			0x07c55312cc0a0bff, 0xcfb38e98ff86c009, 0x991b1e71ade3d0c1, 0x16c68374fc5b8fc3, 0x39f0bf96bb80325c, 0x3d92cb8ed5e787a7, 0xac4d3dcfa4ca208d, 0xfae5ad26f6af3045,
			0x63feb3575b4ce084, 0x28f36ff08bd1b660, 0xc6e17baeb698dd15, 0x84be523f2f1b96ed, 0x3c04d6884037ed50, 0xce25939e6a56aafe, 0xa34c86edb40e5c99, 0xebe67d40c6feb479,
			0x27f2d4d29b15ca74, 0x6d691573de58f667, 0x329370acc523fbb3, 0x2c911be8e5b6039b, 0x871975358d7628e9, 0x550fb7e3f008aecc, 0x7e5bff19d9b4a6a8, 0xf8d4972ac112e4b6,
			0xd1b1e5dcdf133821, 0xfcb6e332af75514d, 0x1e026b442095f828, 0x1f947642b54592df, 0x5e6c78d98eab6723, 0x17509e72698be534, 0x2ac255fcbc6c6293, 0x95bd82591f4a12d1,
			0x799eac0b15bead57, 0xf0107f1a1ddc935d, 0xd674b6ce131933de, 0xf5e41604e66b4c51, 0x8818ce179db254fd, 0x03a7270aa26dbe04, 0x1c33514817282cdb, 0x2f363ce247dbbd9f,
			0xa72ef2f5da69e962, 0x93eecc4d469073d9, 0xb92c99b1fafc114a, 0x77090a2f90aabbb4, 0x0ca69c28b2a9c210, 0xc9e0c08ca65ca101, 0x4b0ddca7d09d56e4, 0x988d03773833ba36,
			0x06534e1459da6108, 0x3a57989c19ed8c58, 0x0952f536491e1d1c, 0x0af5d23ceb73a318, 0x0d30812e2779a8e7, 0xd7e2abc886c95929, 0xa51fc8f9edd43d91, 0x690b616bb03f439c,
			0x516dc3fb9e6f1b37, 0xa489d5ff78045766, 0x52cae4f13c02a533, 0x4cc88fb51c975d1b, 0x459a7a8355894007, 0x9d796a69c384653a, 0x313457a6674e45b7, 0x4a9bc1a1454d3c13,
			0x6268ae51ce9c8a73, 0xfe87d93e98c885be, 0xff11c4380d18ef49, 0x8deca70966058bf1, 0xdeb05efecfd74435, 0xd027f8da4ac352d6, 0xf186621c880cf9aa, 0x43c934970c53210f,
			0xbee9caa336f61ab5, 0x56a890e9526510c8, 0xe8415a4a64930a7d, 0xe32295701a30c392, 0x3e35ec84778a39a3, 0x4f6fa8bfbefae31f, 0x5dcb5fd32cc6d927, 0x9f485065f439b1c9,
			0x1095cd60a581eecb, 0x978cb85528f7c622, 0x7baf9607220379a4, 0xd216c2d67d7e8625, 0xe4e7c662d63ac86d, 0xb62d2293ea386d5e, 0x8a29f41baa0f800e, 0x5ffa65df1b7b0dd4,
			0x61cf895b6cf13477, 0xa6b8eff34fb98395, 0x814a3b21d4ac49e1, 0xaddb20c9311a4a7a, 0x74ae2d2532c705b0, 0x30a24aa0f29e2f40, 0x91dff641712da72a, 0x9049eb47e4fdcddd,
			0x493ce6abe7208217, 0x36f104b4ab444e48, 0xf22145162a6147ae, 0x5c5d42d5b916b3d0, 0xf7d52c08d1d698a2, 0x7a398b01b7d31353, 0x6cff08754b889c90, 0x14f7b978cbe65b30,
			0xc4d041a2812509e6, 0xe085b27ab85d7d96, 0xc0b235baef42bc1d, 0x868f683318a6421e, 0xea706046532ede8e, 0x4ef9b5b92b2a89e8, 0xdc8164f2f86a90c6, 0x2455f3d839787470,
			0x5499aae565d8c43b, 0x59a92bcb42a16cdc, 0xa9b954d15f7dff81, 0xae7c07c39377f47e, 0x01961d0695d06af7, 0xdb4437e034609b39, 0x3bc1859a8c3de6af, 0xaa1e73dbfd104185,
			0x7dfcd8137bd918ac, 0x80dc2627417c2316, 0xd9750dec03dd4fca, 0xc5465ca414f56311, 0x203787c0571fc18b, 0xd5d391c4b1748dda, 0xc2830fb6d8ff68ee, 0xbcd8f0af014bce46,
			0xa0eba1e71663e29d, 0xfb73b020637f5ab2, 0x7c6ac515ee09725b, 0x0000000000000000, 0xc876dd8a338ccbf6, 0x9cef776f56540fcd, 0x47ab408f623494f4, 0xcbd1fa8091e175f2,
			0x9abc397b0f8e6ec5, 0xb58a05994855d35a, 0x4d5e92b3894737ec, 0x961aa553bd27acd5, 0xc31512b04d2f0219, 0xe6d6fc6ee1871c9e, 0xe2b488768fe0a965, 0xb3d94b8d118fb252,
			0x440c6785c0592af0, 0x25c3eedeaca81e87, 0x583f36cdd771062b, 0x2d0706ee7066696c, 0x425f299199834bf8, 0xfd20fe343aa53bba, 0xf643310e4406f255, 0xdad22ae6a1b0f1ce,
			0x1da54c4e82f8462c, 0x355623be0929f04c, 0x769f1729057ad143, 0xbd4eeda9949ba4b1, 0xd8e310ea960d253d, 0x736b7e37fecd0e4f, 0x65adfd430296818c, 0xb8ba84b76f2c7bbd,
			0x9b2a247d9a5e0432, 0xc77766a82348b7e2, 0x08c4e830dcce77eb, 0x0e97a624851416e3, 0x898ed31108623e0a, 0xe571db6443eaa29a, 0x573e8defc7b57a3f, 0x21a19ac6c2cfab7c,
			0x70cc593d5ca0b04b, 0x2664c9d40ec5a083, 0x296572f61e01dc97, 0x85284f39bacbfc1a, 0x715a443bc970dabc, 0xef840958a8990182, 0xcd82b494c83b14fa, 0x48aafbad72f0e8e0,
			0xe9d7474cf143608a, 0x2390a0caf5727f8f, 0xb7bb3f957fe807a9, 0x82ed1c2b76c1f7e5, 0xbb1da3bdcd41c5b9, 0x72fd63316b1d64b8, 0x7808b10d806ec7a0, 0x837b012de3119d12,
			0x689d7c6d25ef296b, 0x02313a0c37bdd4f3, 0x1103d0663051843c, 0xab886edd68c02b72, 0x6b3a5b678782976f, 0xe113af7c2d8d1761, 0x6aac46611252fd98, 0x50fbdefd0bbf71c0,
			0x2ea021e4d20bd768, 0x5a0e0cc1e0ccd2d8, 0x34c03eb89cf99abb, 0xb41c189fdd85b9ad, 0x9ede4d6361e9db3e, 0xafea1ac506a79e89, 0x463d5d89f7e4fe03, 0x18512550794f9920,
			0x41f80e9b3beef5fc, 0xa82f49d7caad9576, 0x0f01bb2210c47c14, 0xec232e520af4bf86, 0x1bf6025adb222724, 0xa2da9beb21de366e, 0xedb533549f24d571, 0x643be0459746eb7b,
			0xbf7fd7a5a3267042, 0x046274186e67b5fb, 0x8e4b8003c46835f5, 0x1332ea6a07ec50cf, 0xd380dfd0e8aeecd2, 0x6f582f7fe9e52294, 0xf9428a2c54c28e41, 0x3fa3f182e25a5354,
			0x535cf9f7a9d2cfc4, 0x660ada49a0fb3f88, 0x33056daa50f39144, 0x8fdd9d0551b85f02, 0x19c73856ec9ff3d7, 0xb1e87181263266a1, 0x1561a47e5e3631c7, 0xd4458cc224a4e72d,
			0xe740e16874577669, 0xc12428bc7a92d6ea, 0x3866a2902e5058ab, 0x1a601f5c4ef24dd3, 0x6059945df9215e80, 0x05f4691efbb7df0c, 0x5b9811c7751cb82f, 0x2b5448fa29bc0864,
			0xba8bbebb5891af4e, 0xf4720b0273bb26a6, 0xdd1779f46dbafa31, 0x6ece32797c354863, 0x7fcde21f4c64cc5f, 0x2206bdcc60a21578, 0x75383023a7176f47, 0xf3b75810bfb12d59
		},
		{
			0x03d0663051843c11, 0xbfe91d3fdfeaf98b, 0xf80e9b3beef5fc41, 0xe5ad26f6af3045fa, 0x5a443bc970dabc71, 0x7b012de3119d1283, 0x82b494c83b14facd, 0x750dec03dd4fcad9,
			0x090a2f90aabbb477, 0xb6e332af75514dfc, 0xadfd430296818c65, 0xfd63316b1d64b872, 0x3d5d89f7e4fe0346, 0xd7474cf143608ae9, 0x7e6c87b3e20c56b0, 0x601f5c4ef24dd31a,
			0x40e16874577669e7, 0x4437e034609b39db, 0xe7c662d63ac86de4, 0xaf9607220379a47b, 0xea1ac506a79e89af, 0xd8f0af014bce46bc, 0x7fd7a5a3267042bf, 0x9f1729057ad14376,
			0x1c189fdd85b9adb4, 0x87d93e98c885befe, 0x57989c19ed8c583a, 0xa4f76c923c3a3812, 0x2a247d9a5e04329b, 0xc03eb89cf99abb34, 0xf6025adb2227241b, 0xa890e9526510c856,
			0x06bdcc60a2157822, 0xc73856ec9ff3d719, 0xcae4f13c02a53352, 0xd6fc6ee1871c9ee6, 0xf0bf96bb80325c39, 0x13af7c2d8d1761e1, 0x3be0459746eb7b64, 0x99aae565d8c43b54,
			0x95cd60a581eecb10, 0x68ae51ce9c8a7362, 0xcde21f4c64cc5f7f, 0xdc2627417c231680, 0x428a2c54c28e41f9, 0x76dd8a338ccbf6c8, 0xb8eff34fb98395a6, 0xa69c28b2a9c2100c,
			0x08b10d806ec7a078, 0xc55312cc0a0bff07, 0x886edd68c02b72ab, 0xdd9d0551b85f028f, 0x1e73dbfd104185aa, 0x911be8e5b6039b2c, 0x30812e2779a8e70d, 0x3a5b678782976f6b,
			0x20fe343aa53bbafd, 0xb954d15f7dff81a9, 0x9a7a835589400745, 0x1fc8f9edd43d91a5, 0x0e0cc1e0ccd2d85a, 0xbb3f957fe807a9b7, 0xc3eedeaca81e8725, 0x66a2902e5058ab38,
			0xff08754b889c906c, 0xfeb3575b4ce08463, 0x107f1a1ddc935df0, 0x25939e6a56aafece, 0xa92bcb42a16cdc59, 0x32ea6a07ec50cf13, 0x947642b54592df1f, 0x1779f46dbafa31dd,
			0x5623be0929f04c35, 0xf2d4d29b15ca7427, 0x59945df9215e8060, 0x9370acc523fbb332, 0xb05efecfd74435de, 0x71db6443eaa29ae5, 0xe2abc886c95929d7, 0x458cc224a4e72dd4,
			0xce32797c3548636e, 0x1aa553bd27acd596, 0x4a3b21d4ac49e181, 0x284f39bacbfc1a85, 0xd94b8d118fb252b3, 0xb235baef42bc1dc0, 0x2643f85a072ec2df, 0x8bbebb5891af4eba,
			0x89d5ff78045766a4, 0xeecc4d469073d993, 0x0b616bb03f439c69, 0xe41604e66b4c51f5, 0x16c2d67d7e8625d2, 0x6c78d98eab67235e, 0x9d7c6d25ef296b68, 0x64c9d40ec5a08326,
			0x2ef2f5da69e962a7, 0xfa65df1b7b0dd45f, 0x12145e3d496b75ee, 0xfcd8137bd918ac7d, 0x52f536491e1d1c09, 0xe67d40c6feb479eb, 0x2145162a6147aef2, 0x29f41baa0f800e8a,
			0x0000000000000000, 0x840958a8990182ef, 0xc88fb51c975d1b4c, 0xc68374fc5b8fc316, 0x5d42d5b916b3d05c, 0x7dbce183b3886aa1, 0x512550794f992018, 0xe17baeb698dd15c6,
			0x43310e4406f255f6, 0x6dc3fb9e6f1b3751, 0x86621c880cf9aaf1, 0xbc397b0f8e6ec59a, 0x415a4a64930a7de8, 0x04d6884037ed503c, 0xe9caa336f61ab5be, 0x0ada49a0fb3f8866,
			0x55f3d83978747024, 0x3ce6abe720821749, 0xf5d23ceb73a3180a, 0xa24aa0f29e2f4030, 0x582f7fe9e522946f, 0x7aba0ff3d5e1068c, 0x313a0c37bdd4f302, 0x3787c0571fc18b20,
			0x5cf9f7a9d2cfc453, 0xbe523f2f1b96ed84, 0x85b27ab85d7d96e0, 0x0706ee7066696c2d, 0x961d0695d06af701, 0x1b1e71ade3d0c199, 0xc255fcbc6c62932a, 0x398b01b7d313537a,
			0xcc593d5ca0b04b70, 0x5f299199834bf842, 0x80dfd0e8aeecd2d3, 0x9eac0b15bead5779, 0xef776f56540fcd9c, 0x2f49d7caad9576a8, 0x2c99b1fafc114ab9, 0x8d03773833ba3698,
			0x720b0273bb26a6f4, 0x18ce179db254fd88, 0x8f683318a6421e86, 0x4f568b845fd8a5b2, 0x8ed31108623e0a89, 0xd22ae6a1b0f1ceda, 0x74b6ce131933ded6, 0x97a624851416e30e,
			0x6e139dae3e9f0b40, 0xa7270aa26dbe0403, 0x5448fa29bc08642b, 0xe310ea960d253dd8, 0x706046532ede8eea, 0x485065f439b1c99f, 0x6b7e37fecd0e4f73, 0xfbdefd0bbf71c050,
			0xd391c4b1748ddad5, 0xa021e4d20bd7682e, 0xab408f623494f447, 0x5bff19d9b4a6a87e, 0xb1e5dcdf133821d1, 0x026b442095f8281e, 0xdff641712da72a91, 0x11c4380d18ef49ff,
			0xae2d2532c705b074, 0xc1859a8c3de6af3b, 0x4b8003c46835f58e, 0x92cb8ed5e787a73d, 0xcb5fd32cc6d9275d, 0x8cb85528f7c62297, 0x9bc1a1454d3c134a, 0x056daa50f3914433,
			0xf4691efbb7df0c05, 0xd1fa8091e175f2cb, 0x7c07c39377f47eae, 0x14a9925deb7e0dcc, 0xcf895b6cf1347761, 0x0fb7e3f008aecc55, 0x8a05994855d35ab5, 0xf104b4ab444e4836,
			0x691573de58f6676d, 0x4eeda9949ba4b1bd, 0x2428bc7a92d6eac1, 0xb75810bfb12d59f3, 0x63cf3a7ea3c9ef0b, 0x6274186e67b5fb04, 0x1512b04d2f0219c3, 0xe87181263266a1b1,
			0x1975358d7628e987, 0x534e1459da610806, 0x47e78604311f05ca, 0xd4972ac112e4b6f8, 0x33514817282cdb1c, 0x90a0caf5727f8f23, 0x3e8defc7b57a3f57, 0x3f36cdd771062b58,
			0x796a69c384653a9d, 0x465ca414f56311c5, 0x5e92b3894737ec4d, 0x9811c7751cb82f5b, 0xd041a2812509e6c4, 0x49eb47e4fdcddd90, 0x78d14bd340192e92, 0xf9b5b92b2a89e84e,
			0x61a47e5e3631c715, 0x509e72698be53417, 0xb533549f24d571ed, 0x27f8da4ac352d6d0, 0x6572f61e01dc9729, 0xde4d6361e9db3e9e, 0x3457a6674e45b731, 0xa54c4e82f8462c1d,
			0xbd82591f4a12d195, 0x830fb6d8ff68eec2, 0x383023a7176f4775, 0x7766a82348b7e2c7, 0x0c6785c0592af044, 0xba84b76f2c7bbdb8, 0xe0c08ca65ca101c9, 0xeba1e71663e29da0,
			0xd52c08d1d698a2f7, 0xc4e830dcce77eb08, 0xda9beb21de366ea2, 0xa3f182e25a53543f, 0xac46611252fd986a, 0xb38e98ff86c009cf, 0xf36ff08bd1b66028, 0xdb20c9311a4a7aad,
			0xa19ac6c2cfab7c21, 0x6ac515ee09725b7c, 0x4c86edb40e5c99a3, 0x363ce247dbbd9f2f, 0x8164f2f86a90c6dc, 0x35ec84778a39a33e, 0xb488768fe0a965e2, 0x73b020637f5ab2fb,
			0x232e520af4bf86ec, 0x6fa8bfbefae31f4f, 0xeca70966058bf18d, 0x1da3bdcd41c5b9bb, 0x9cc74f352b557f67, 0x4d3dcfa4ca208dac, 0x2b9f5f8a9a782694, 0xaafbad72f0e8e048,
			0xc934970c53210f43, 0xed1c2b76c1f7e582, 0x01bb2210c47c140f, 0x0ddca7d09d56e44b, 0x2d2293ea386d5eb6, 0xf7b978cbe65b3014, 0x6719b23e9424bf37, 0x2295701a30c392e3
		},
		{
			0x9f5f8a9a7826942b, 0x34970c53210f43c9, 0x9d0551b85f028fdd, 0xb494c83b14facd82, 0x6edd68c02b72ab88, 0xff19d9b4a6a87e5b, 0xdb6443eaa29ae571, 0x1be8e5b6039b2c91,
			0x5fd32cc6d9275dcb, 0x90e9526510c856a8, 0xb27ab85d7d96e085, 0xa47e5e3631c71561, 0xf3d8397874702455, 0xfbad72f0e8e048aa, 0x37e034609b39db44, 0xfa8091e175f2cbd1,
			0xcaa336f61ab5bee9, 0xeff34fb98395a6b8, 0x63316b1d64b872fd, 0xba0ff3d5e1068c7a, 0xcd60a581eecb1095, 0x35baef42bc1dc0b2, 0x23be0929f04c3556, 0x4b8d118fb252b3d9,
			0xd8137bd918ac7dfc, 0x0a2f90aabbb47709, 0xc2d67d7e8625d216, 0x7181263266a1b1e8, 0x3023a7176f477538, 0x7642b54592df1f94, 0xf2f5da69e962a72e, 0xa70966058bf18dec,
			0xc662d63ac86de4e7, 0x939e6a56aafece25, 0x86edb40e5c99a34c, 0xf8da4ac352d6d027, 0x145e3d496b75ee12, 0xce179db254fd8818, 0xd23ceb73a3180af5, 0x270aa26dbe0403a7,
			0x5d89f7e4fe03463d, 0x2ae6a1b0f1cedad2, 0x1729057ad143769f, 0xb10d806ec7a07808, 0x4f39bacbfc1a8528, 0xeda9949ba4b1bd4e, 0x5312cc0a0bff07c5, 0xc4380d18ef49ff11,
			0x95701a30c392e322, 0xa0caf5727f8f2390, 0x55fcbc6c62932ac2, 0xcf3a7ea3c9ef0b63, 0x621c880cf9aaf186, 0xfd430296818c65ad, 0xbf96bb80325c39f0, 0x6c87b3e20c56b07e,
			0x299199834bf8425f, 0x74186e67b5fb0462, 0x4c4e82f8462c1da5, 0x64f2f86a90c6dc81, 0x6b442095f8281e02, 0x1d0695d06af70196, 0xd5ff78045766a489, 0x3856ec9ff3d719c7,
			0xac0b15bead57799e, 0xc3fb9e6f1b37516d, 0x8e98ff86c009cfb3, 0x49d7caad9576a82f, 0x859a8c3de6af3bc1, 0x3dcfa4ca208dac4d, 0x91c4b1748ddad5d3, 0x8a2c54c28e41f942,
			0x2bcb42a16cdc59a9, 0x9e72698be5341750, 0x1e71ade3d0c1991b, 0xe6abe7208217493c, 0x3a0c37bdd4f30231, 0x945df9215e806059, 0xcc4d469073d993ee, 0x0e9b3beef5fc41f8,
			0x8b01b7d313537a39, 0xf182e25a53543fa3, 0x5810bfb12d59f3b7, 0x8003c46835f58e4b, 0xbce183b3886aa17d, 0x1604e66b4c51f5e4, 0x2c08d1d698a2f7d5, 0xc08ca65ca101c9e0,
			0x7a8355894007459a, 0xe21f4c64cc5f7fcd, 0x88768fe0a965e2b4, 0x82591f4a12d195bd, 0x4aa0f29e2f4030a2, 0xdca7d09d56e44b0d, 0x6daa50f391443305, 0x92b3894737ec4d5e,
			0xa8bfbefae31f4f6f, 0xea6a07ec50cf1332, 0x2293ea386d5eb62d, 0x41a2812509e6c4d0, 0x8374fc5b8fc316c6, 0x683318a6421e868f, 0xb3575b4ce08463fe, 0xe5dcdf133821d1b1,
			0xd6884037ed503c04, 0x05994855d35ab58a, 0x5b678782976f6b3a, 0x397b0f8e6ec59abc, 0xabc886c95929d7e2, 0xe4f13c02a53352ca, 0xb5b92b2a89e84ef9, 0xaf7c2d8d1761e113,
			0x75358d7628e98719, 0x72f61e01dc972965, 0x78d98eab67235e6c, 0xc8f9edd43d91a51f, 0x0fb6d8ff68eec283, 0x70acc523fbb33293, 0x36cdd771062b583f, 0xbdcc60a215782206,
			0xa624851416e30e97, 0x9607220379a47baf, 0x1c2b76c1f7e582ed, 0x6046532ede8eea70, 0xbebb5891af4eba8b, 0x48fa29bc08642b54, 0x19b23e9424bf3767, 0x2627417c231680dc,
			0x65df1b7b0dd45ffa, 0xf536491e1d1c0952, 0x54d15f7dff81a9b9, 0x2550794f99201851, 0xdefd0bbf71c050fb, 0x87c0571fc18b2037, 0x10ea960d253dd8e3, 0xe0459746eb7b643b,
			0x12b04d2f0219c315, 0xaae565d8c43b5499, 0xe91d3fdfeaf98bbf, 0xf76c923c3a3812a4, 0x1f5c4ef24dd31a60, 0x812e2779a8e70d30, 0xf41baa0f800e8a29, 0xfc6ee1871c9ee6d6,
			0x8fb51c975d1b4cc8, 0x4e1459da61080653, 0x310e4406f255f643, 0x0cc1e0ccd2d85a0e, 0x0958a8990182ef84, 0xa9925deb7e0dcc14, 0x6a69c384653a9d79, 0x04b4ab444e4836f1,
			0x0dec03dd4fcad975, 0xeb47e4fdcddd9049, 0x7e37fecd0e4f736b, 0x73dbfd104185aa1e, 0xc515ee09725b7c6a, 0xae51ce9c8a736268, 0xa3bdcd41c5b9bb1d, 0x84b76f2c7bbdb8ba,
			0x443bc970dabc715a, 0xa1e71663e29da0eb, 0x7f1a1ddc935df010, 0x474cf143608ae9d7, 0x33549f24d571edb5, 0xc9d40ec5a0832664, 0x46611252fd986aac, 0x5efecfd74435deb0,
			0x0000000000000000, 0x514817282cdb1c33, 0x408f623494f447ab, 0x57a6674e45b73134, 0x11c7751cb82f5b98, 0x989c19ed8c583a57, 0x7baeb698dd15c6e1, 0x06ee7066696c2d07,
			0xda49a0fb3f88660a, 0x07c39377f47eae7c, 0x2d2532c705b074ae, 0x42d5b916b3d05c5d, 0xec84778a39a33e35, 0x776f56540fcd9cef, 0xa553bd27acd5961a, 0xb978cbe65b3014f7,
			0x895b6cf1347761cf, 0xb85528f7c622978c, 0x66a82348b7e2c777, 0xe830dcce77eb08c4, 0x189fdd85b9adb41c, 0x99b1fafc114ab92c, 0x0b0273bb26a6f472, 0xeedeaca81e8725c3,
			0x6785c0592af0440c, 0x247d9a5e04329b2a, 0x21e4d20bd7682ea0, 0xbb2210c47c140f01, 0x523f2f1b96ed84be, 0xd4d29b15ca7427f2, 0x45162a6147aef221, 0xf641712da72a91df,
			0xb020637f5ab2fb73, 0xdd8a338ccbf6c876, 0x5ca414f56311c546, 0x3f957fe807a9b7bb, 0x8cc224a4e72dd445, 0x012de3119d12837b, 0xd0663051843c1103, 0x5a4a64930a7de841,
			0x28bc7a92d6eac124, 0x08754b889c906cff, 0xd7a5a3267042bf7f, 0x3ce247dbbd9f2f36, 0x6ff08bd1b66028f3, 0xd14bd340192e9278, 0x139dae3e9f0b406e, 0xe78604311f05ca47,
			0xd93e98c885befe87, 0x616bb03f439c690b, 0x03773833ba36988d, 0xcb8ed5e787a73d92, 0xb7e3f008aecc550f, 0x9c28b2a9c2100ca6, 0x3eb89cf99abb34c0, 0x3b21d4ac49e1814a,
			0xdfd0e8aeecd2d380, 0x7c6d25ef296b689d, 0xc1a1454d3c134a9b, 0xf9f7a9d2cfc4535c, 0xc74f352b557f679c, 0x7d40c6feb479ebe6, 0x1573de58f6676d69, 0x1ac506a79e89afea,
			0x568b845fd8a5b24f, 0x32797c3548636ece, 0x691efbb7df0c05f4, 0x972ac112e4b6f8d4, 0x79f46dbafa31dd17, 0x2e520af4bf86ec23, 0xd31108623e0a898e, 0x8defc7b57a3f573e,
			0x025adb2227241bf6, 0xa2902e5058ab3866, 0xfe343aa53bbafd20, 0xad26f6af3045fae5, 0x43f85a072ec2df26, 0x2f7fe9e522946f58, 0x9beb21de366ea2da, 0x20c9311a4a7aaddb,
			0x5065f439b1c99f48, 0x593d5ca0b04b70cc, 0x9ac6c2cfab7c21a1, 0xb6ce131933ded674, 0xf0af014bce46bcd8, 0x4d6361e9db3e9ede, 0xe16874577669e740, 0xe332af75514dfcb6
		},
		{
			0xbfbefae31f4f6fa8, 0x85c0592af0440c67, 0xbaef42bc1dc0b235, 0x5528f7c622978cb8, 0xe6a1b0f1cedad22a, 0x3ceb73a3180af5d2, 0x7fe9e522946f582f, 0xa7d09d56e44b0ddc,
			0x754b889c906cff08, 0xe247dbbd9f2f363c, 0x81263266a1b1e871, 0xdcdf133821d1b1e5, 0xf46dbafa31dd1779, 0x3d5ca0b04b70cc59, 0x56ec9ff3d719c738, 0xdeaca81e8725c3ee,
			0x549f24d571edb533, 0x2de3119d12837b01, 0xea960d253dd8e310, 0xc886c95929d7e2ab, 0x2f90aabbb477090a, 0x26f6af3045fae5ad, 0x6ee1871c9ee6d6fc, 0x3e98c885befe87d9,
			0x24851416e30e97a6, 0xda4ac352d6d027f8, 0xe3f008aecc550fb7, 0x994855d35ab58a05, 0x5df9215e80605994, 0x58a8990182ef8409, 0xb1fafc114ab92c99, 0x442095f8281e026b,
			0xf5da69e962a72ef2, 0xc0571fc18b203787, 0x37fecd0e4f736b7e, 0x902e5058ab3866a2, 0xeb21de366ea2da9b, 0x8f623494f447ab40, 0xd98eab67235e6c78, 0xa414f56311c5465c,
			0x5c4ef24dd31a601f, 0x08d1d698a2f7d52c, 0xdbfd104185aa1e73, 0xcb42a16cdc59a92b, 0x10bfb12d59f3b758, 0xa82348b7e2c77766, 0xbdcd41c5b9bb1da3, 0x7ab85d7d96e085b2,
			0xedb40e5c99a34c86, 0xff78045766a489d5, 0xf34fb98395a6b8ef, 0x4f352b557f679cc7, 0x4a64930a7de8415a, 0xe8e5b6039b2c911b, 0xb4ab444e4836f104, 0x4817282cdb1c3351,
			0xaeb698dd15c6e17b, 0x3f2f1b96ed84be52, 0x21d4ac49e1814a3b, 0x884037ed503c04d6, 0xbe0929f04c355623, 0xe565d8c43b5499aa, 0x1108623e0a898ed3, 0x2532c705b074ae2d,
			0x0551b85f028fdd9d, 0x03c46835f58e4b80, 0xf13c02a53352cae4, 0xee7066696c2d0706, 0xc6c2cfab7c21a19a, 0xb04d2f0219c31512, 0x0273bb26a6f4720b, 0x8604311f05ca47e7,
			0xaf014bce46bcd8f0, 0x3318a6421e868f68, 0x96bb80325c39f0bf, 0x40c6feb479ebe67d, 0x12cc0a0bff07c553, 0x162a6147aef22145, 0x71ade3d0c1991b1e, 0xce131933ded674b6,
			0xc9311a4a7aaddb20, 0x32af75514dfcb6e3, 0x62d63ac86de4e7c6, 0xb23e9424bf376719, 0x8355894007459a7a, 0x137bd918ac7dfcd8, 0x42b54592df1f9476, 0xabe7208217493ce6,
			0x9b3beef5fc41f80e, 0x2e2779a8e70d3081, 0x4d469073d993eecc, 0x768fe0a965e2b488, 0xd0e8aeecd2d380df, 0xa2812509e6c4d041, 0x0ff3d5e1068c7aba, 0x04e66b4c51f5e416,
			0x2c54c28e41f9428a, 0x01b7d313537a398b, 0xcc60a215782206bd, 0xc506a79e89afea1a, 0x4cf143608ae9d747, 0x8a338ccbf6c876dd, 0x29057ad143769f17, 0xcfa4ca208dac4d3d,
			0xa6674e45b7313457, 0x50794f9920185125, 0xb89cf99abb34c03e, 0x343aa53bbafd20fe, 0x89f7e4fe03463d5d, 0xa5a3267042bf7fd7, 0xefc7b57a3f573e8d, 0x9fdd85b9adb41c18,
			0xec03dd4fcad9750d, 0x970c53210f43c934, 0xc7751cb82f5b9811, 0xc1e0ccd2d85a0e0c, 0xad72f0e8e048aafb, 0x0966058bf18deca7, 0x47e4fdcddd9049eb, 0x19d9b4a6a87e5bff,
			0x1a1ddc935df0107f, 0x591f4a12d195bd82, 0x1efbb7df0c05f469, 0x575b4ce08463feb3, 0x0e4406f255f64331, 0x2ac112e4b6f8d497, 0xa0f29e2f4030a24a, 0x179db254fd8818ce,
			0x663051843c1103d0, 0xe4d20bd7682ea021, 0xd15f7dff81a9b954, 0xd32cc6d9275dcb5f, 0x94c83b14facd82b4, 0xaa50f3914433056d, 0x358d7628e9871975, 0xbc7a92d6eac12428,
			0x39bacbfc1a85284f, 0x9199834bf8425f29, 0x73de58f6676d6915, 0xd5b916b3d05c5d42, 0x46532ede8eea7060, 0x186e67b5fb046274, 0xa1454d3c134a9bc1, 0x0b15bead57799eac,
			0x5adb2227241bf602, 0xdd68c02b72ab886e, 0x6443eaa29ae571db, 0xfd0bbf71c050fbde, 0x8b845fd8a5b24f56, 0xb92b2a89e84ef9b5, 0x678782976f6b3a5b, 0xf2f86a90c6dc8164,
			0xc39377f47eae7c07, 0x93ea386d5eb62d22, 0x430296818c65adfd, 0xc224a4e72dd4458c, 0x9e6a56aafece2593, 0x6f56540fcd9cef77, 0x84778a39a33e35ec, 0xf85a072ec2df2643,
			0x3bc970dabc715a44, 0x0d806ec7a07808b1, 0x773833ba36988d03, 0x27417c231680dc26, 0x60a581eecb1095cd, 0xb76f2c7bbdb8ba84, 0xd8397874702455f3, 0xfecfd74435deb05e,
			0xcaf5727f8f2390a0, 0xa9949ba4b1bd4eed, 0xe034609b39db4437, 0x2b76c1f7e582ed1c, 0xf7a9d2cfc4535cf9, 0x20637f5ab2fb73b0, 0x9c19ed8c583a5798, 0xd67d7e8625d216c2,
			0x1459da610806534e, 0x6d25ef296b689d7c, 0x925deb7e0dcc14a9, 0x65f439b1c99f4850, 0x957fe807a9b7bb3f, 0x41712da72a91dff6, 0x36491e1d1c0952f5, 0x5e3d496b75ee1214,
			0x1d3fdfeaf98bbfe9, 0x701a30c392e32295, 0x6361e9db3e9ede4d, 0xd7caad9576a82f49, 0xe71663e29da0eba1, 0x98ff86c009cfb38e, 0x6bb03f439c690b61, 0xc4b1748ddad5d391,
			0x6c923c3a3812a4f7, 0x1f4c64cc5f7fcde2, 0xe183b3886aa17dbc, 0xb6d8ff68eec2830f, 0x51ce9c8a736268ae, 0x07220379a47baf96, 0x82e25a53543fa3f1, 0xbb5891af4eba8bbe,
			0x4bd340192e9278d1, 0x6874577669e740e1, 0xfb9e6f1b37516dc3, 0xacc523fbb3329370, 0x69c384653a9d796a, 0x5b6cf1347761cf89, 0x0000000000000000, 0x49a0fb3f88660ada,
			0xa336f61ab5bee9ca, 0x15ee09725b7c6ac5, 0x8d118fb252b3d94b, 0x7d9a5e04329b2a24, 0x1baa0f800e8a29f4, 0xfa29bc08642b5448, 0x459746eb7b643be0, 0xdf1b7b0dd45ffa65,
			0x30dcce77eb08c4e8, 0x8091e175f2cbd1fa, 0x0c37bdd4f302313a, 0xf9edd43d91a51fc8, 0x3a7ea3c9ef0b63cf, 0x74fc5b8fc316c683, 0x8ca65ca101c9e0c0, 0x72698be53417509e,
			0x23a7176f47753830, 0x797c3548636ece32, 0xb51c975d1b4cc88f, 0x2210c47c140f01bb, 0xd29b15ca7427f2d4, 0x8ed5e787a73d92cb, 0x7e5e3631c71561a4, 0x1c880cf9aaf18662,
			0xf08bd1b66028f36f, 0xf61e01dc97296572, 0x7b0f8e6ec59abc39, 0xb3894737ec4d5e92, 0x316b1d64b872fd63, 0x9a8c3de6af3bc185, 0x0aa26dbe0403a727, 0x5f8a9a7826942b9f,
			0x520af4bf86ec232e, 0x380d18ef49ff11c4, 0x0695d06af701961d, 0x87b3e20c56b07e6c, 0x53bd27acd5961aa5, 0x7c2d8d1761e113af, 0x28b2a9c2100ca69c, 0x6a07ec50cf1332ea,
			0xe9526510c856a890, 0xcdd771062b583f36, 0xfcbc6c62932ac255, 0x9dae3e9f0b406e13, 0xd40ec5a0832664c9, 0x78cbe65b3014f7b9, 0x4e82f8462c1da54c, 0x611252fd986aac46
		},
		{
			0x352b557f679cc74f, 0x3e9424bf376719b2, 0x5deb7e0dcc14a992, 0xb3e20c56b07e6c87, 0x83b3886aa17dbce1, 0x3d496b75ee12145e, 0xae3e9f0b406e139d, 0x8a9a7826942b9f5f,
			0x845fd8a5b24f568b, 0x5a072ec2df2643f8, 0xf3d5e1068c7aba0f, 0x7ea3c9ef0b63cf3a, 0x923c3a3812a4f76c, 0x3fdfeaf98bbfe91d, 0xd340192e9278d14b, 0x04311f05ca47e786,
			0xcc0a0bff07c55312, 0xff86c009cfb38e98, 0xade3d0c1991b1e71, 0xfc5b8fc316c68374, 0xbb80325c39f0bf96, 0xd5e787a73d92cb8e, 0xa4ca208dac4d3dcf, 0xf6af3045fae5ad26,
			0x5b4ce08463feb357, 0x8bd1b66028f36ff0, 0xb698dd15c6e17bae, 0x2f1b96ed84be523f, 0x4037ed503c04d688, 0x6a56aafece25939e, 0xb40e5c99a34c86ed, 0xc6feb479ebe67d40,
			0x9b15ca7427f2d4d2, 0xde58f6676d691573, 0xc523fbb3329370ac, 0xe5b6039b2c911be8, 0x8d7628e987197535, 0xf008aecc550fb7e3, 0xd9b4a6a87e5bff19, 0xc112e4b6f8d4972a,
			0xdf133821d1b1e5dc, 0xaf75514dfcb6e332, 0x2095f8281e026b44, 0xb54592df1f947642, 0x8eab67235e6c78d9, 0x698be53417509e72, 0xbc6c62932ac255fc, 0x1f4a12d195bd8259,
			0x15bead57799eac0b, 0x1ddc935df0107f1a, 0x131933ded674b6ce, 0xe66b4c51f5e41604, 0x9db254fd8818ce17, 0xa26dbe0403a7270a, 0x17282cdb1c335148, 0x47dbbd9f2f363ce2,
			0xda69e962a72ef2f5, 0x469073d993eecc4d, 0xfafc114ab92c99b1, 0x90aabbb477090a2f, 0xb2a9c2100ca69c28, 0xa65ca101c9e0c08c, 0xd09d56e44b0ddca7, 0x3833ba36988d0377,
			0x59da610806534e14, 0x19ed8c583a57989c, 0x491e1d1c0952f536, 0xeb73a3180af5d23c, 0x2779a8e70d30812e, 0x86c95929d7e2abc8, 0xedd43d91a51fc8f9, 0xb03f439c690b616b,
			0x9e6f1b37516dc3fb, 0x78045766a489d5ff, 0x3c02a53352cae4f1, 0x1c975d1b4cc88fb5, 0x55894007459a7a83, 0xc384653a9d796a69, 0x674e45b7313457a6, 0x454d3c134a9bc1a1,
			0xce9c8a736268ae51, 0x98c885befe87d93e, 0x0d18ef49ff11c438, 0x66058bf18deca709, 0xcfd74435deb05efe, 0x4ac352d6d027f8da, 0x880cf9aaf186621c, 0x0c53210f43c93497,
			0x36f61ab5bee9caa3, 0x526510c856a890e9, 0x64930a7de8415a4a, 0x1a30c392e3229570, 0x778a39a33e35ec84, 0xbefae31f4f6fa8bf, 0x2cc6d9275dcb5fd3, 0xf439b1c99f485065,
			0xa581eecb1095cd60, 0x28f7c622978cb855, 0x220379a47baf9607, 0x7d7e8625d216c2d6, 0xd63ac86de4e7c662, 0xea386d5eb62d2293, 0xaa0f800e8a29f41b, 0x1b7b0dd45ffa65df,
			0x6cf1347761cf895b, 0x4fb98395a6b8eff3, 0xd4ac49e1814a3b21, 0x311a4a7aaddb20c9, 0x32c705b074ae2d25, 0xf29e2f4030a24aa0, 0x712da72a91dff641, 0xe4fdcddd9049eb47,
			0xe7208217493ce6ab, 0xab444e4836f104b4, 0x2a6147aef2214516, 0xb916b3d05c5d42d5, 0xd1d698a2f7d52c08, 0xb7d313537a398b01, 0x4b889c906cff0875, 0xcbe65b3014f7b978,
			0x812509e6c4d041a2, 0xb85d7d96e085b27a, 0xef42bc1dc0b235ba, 0x18a6421e868f6833, 0x532ede8eea706046, 0x2b2a89e84ef9b5b9, 0xf86a90c6dc8164f2, 0x397874702455f3d8,
			0x65d8c43b5499aae5, 0x42a16cdc59a92bcb, 0x5f7dff81a9b954d1, 0x9377f47eae7c07c3, 0x95d06af701961d06, 0x34609b39db4437e0, 0x8c3de6af3bc1859a, 0xfd104185aa1e73db,
			0x7bd918ac7dfcd813, 0x417c231680dc2627, 0x03dd4fcad9750dec, 0x14f56311c5465ca4, 0x571fc18b203787c0, 0xb1748ddad5d391c4, 0xd8ff68eec2830fb6, 0x014bce46bcd8f0af,
			0x1663e29da0eba1e7, 0x637f5ab2fb73b020, 0xee09725b7c6ac515, 0x0000000000000000, 0x338ccbf6c876dd8a, 0x56540fcd9cef776f, 0x623494f447ab408f, 0x91e175f2cbd1fa80,
			0x0f8e6ec59abc397b, 0x4855d35ab58a0599, 0x894737ec4d5e92b3, 0xbd27acd5961aa553, 0x4d2f0219c31512b0, 0xe1871c9ee6d6fc6e, 0x8fe0a965e2b48876, 0x118fb252b3d94b8d,
			0xc0592af0440c6785, 0xaca81e8725c3eede, 0xd771062b583f36cd, 0x7066696c2d0706ee, 0x99834bf8425f2991, 0x3aa53bbafd20fe34, 0x4406f255f643310e, 0xa1b0f1cedad22ae6,
			0x82f8462c1da54c4e, 0x0929f04c355623be, 0x057ad143769f1729, 0x949ba4b1bd4eeda9, 0x960d253dd8e310ea, 0xfecd0e4f736b7e37, 0x0296818c65adfd43, 0x6f2c7bbdb8ba84b7,
			0x9a5e04329b2a247d, 0x2348b7e2c77766a8, 0xdcce77eb08c4e830, 0x851416e30e97a624, 0x08623e0a898ed311, 0x43eaa29ae571db64, 0xc7b57a3f573e8def, 0xc2cfab7c21a19ac6,
			0x5ca0b04b70cc593d, 0x0ec5a0832664c9d4, 0x1e01dc97296572f6, 0xbacbfc1a85284f39, 0xc970dabc715a443b, 0xa8990182ef840958, 0xc83b14facd82b494, 0x72f0e8e048aafbad,
			0xf143608ae9d7474c, 0xf5727f8f2390a0ca, 0x7fe807a9b7bb3f95, 0x76c1f7e582ed1c2b, 0xcd41c5b9bb1da3bd, 0x6b1d64b872fd6331, 0x806ec7a07808b10d, 0xe3119d12837b012d,
			0x25ef296b689d7c6d, 0x37bdd4f302313a0c, 0x3051843c1103d066, 0x68c02b72ab886edd, 0x8782976f6b3a5b67, 0x2d8d1761e113af7c, 0x1252fd986aac4661, 0x0bbf71c050fbdefd,
			0xd20bd7682ea021e4, 0xe0ccd2d85a0e0cc1, 0x9cf99abb34c03eb8, 0xdd85b9adb41c189f, 0x61e9db3e9ede4d63, 0x06a79e89afea1ac5, 0xf7e4fe03463d5d89, 0x794f992018512550,
			0x3beef5fc41f80e9b, 0xcaad9576a82f49d7, 0x10c47c140f01bb22, 0x0af4bf86ec232e52, 0xdb2227241bf6025a, 0x21de366ea2da9beb, 0x9f24d571edb53354, 0x9746eb7b643be045,
			0xa3267042bf7fd7a5, 0x6e67b5fb04627418, 0xc46835f58e4b8003, 0x07ec50cf1332ea6a, 0xe8aeecd2d380dfd0, 0xe9e522946f582f7f, 0x54c28e41f9428a2c, 0xe25a53543fa3f182,
			0xa9d2cfc4535cf9f7, 0xa0fb3f88660ada49, 0x50f3914433056daa, 0x51b85f028fdd9d05, 0xec9ff3d719c73856, 0x263266a1b1e87181, 0x5e3631c71561a47e, 0x24a4e72dd4458cc2,
			0x74577669e740e168, 0x7a92d6eac12428bc, 0x2e5058ab3866a290, 0x4ef24dd31a601f5c, 0xf9215e806059945d, 0xfbb7df0c05f4691e, 0x751cb82f5b9811c7, 0x29bc08642b5448fa,
			0x5891af4eba8bbebb, 0x73bb26a6f4720b02, 0x6dbafa31dd1779f4, 0x7c3548636ece3279, 0x4c64cc5f7fcde21f, 0x60a215782206bdcc, 0xa7176f4775383023, 0xbfb12d59f3b75810
		},
		{
			0x51843c1103d06630, 0xdfeaf98bbfe91d3f, 0xeef5fc41f80e9b3b, 0xaf3045fae5ad26f6, 0x70dabc715a443bc9, 0x119d12837b012de3, 0x3b14facd82b494c8, 0xdd4fcad9750dec03,
			0xaabbb477090a2f90, 0x75514dfcb6e332af, 0x96818c65adfd4302, 0x1d64b872fd63316b, 0xe4fe03463d5d89f7, 0x43608ae9d7474cf1, 0xe20c56b07e6c87b3, 0xf24dd31a601f5c4e,
			0x577669e740e16874, 0x609b39db4437e034, 0x3ac86de4e7c662d6, 0x0379a47baf960722, 0xa79e89afea1ac506, 0x4bce46bcd8f0af01, 0x267042bf7fd7a5a3, 0x7ad143769f172905,
			0x85b9adb41c189fdd, 0xc885befe87d93e98, 0xed8c583a57989c19, 0x3c3a3812a4f76c92, 0x5e04329b2a247d9a, 0xf99abb34c03eb89c, 0x2227241bf6025adb, 0x6510c856a890e952,
			0xa215782206bdcc60, 0x9ff3d719c73856ec, 0x02a53352cae4f13c, 0x871c9ee6d6fc6ee1, 0x80325c39f0bf96bb, 0x8d1761e113af7c2d, 0x46eb7b643be04597, 0xd8c43b5499aae565,
			0x81eecb1095cd60a5, 0x9c8a736268ae51ce, 0x64cc5f7fcde21f4c, 0x7c231680dc262741, 0xc28e41f9428a2c54, 0x8ccbf6c876dd8a33, 0xb98395a6b8eff34f, 0xa9c2100ca69c28b2,
			0x6ec7a07808b10d80, 0x0a0bff07c55312cc, 0xc02b72ab886edd68, 0xb85f028fdd9d0551, 0x104185aa1e73dbfd, 0xb6039b2c911be8e5, 0x79a8e70d30812e27, 0x82976f6b3a5b6787,
			0xa53bbafd20fe343a, 0x7dff81a9b954d15f, 0x894007459a7a8355, 0xd43d91a51fc8f9ed, 0xccd2d85a0e0cc1e0, 0xe807a9b7bb3f957f, 0xa81e8725c3eedeac, 0x5058ab3866a2902e,
			0x889c906cff08754b, 0x4ce08463feb3575b, 0xdc935df0107f1a1d, 0x56aafece25939e6a, 0xa16cdc59a92bcb42, 0xec50cf1332ea6a07, 0x4592df1f947642b5, 0xbafa31dd1779f46d,
			0x29f04c355623be09, 0x15ca7427f2d4d29b, 0x215e806059945df9, 0x23fbb3329370acc5, 0xd74435deb05efecf, 0xeaa29ae571db6443, 0xc95929d7e2abc886, 0xa4e72dd4458cc224,
			0x3548636ece32797c, 0x27acd5961aa553bd, 0xac49e1814a3b21d4, 0xcbfc1a85284f39ba, 0x8fb252b3d94b8d11, 0x42bc1dc0b235baef, 0x072ec2df2643f85a, 0x91af4eba8bbebb58,
			0x045766a489d5ff78, 0x9073d993eecc4d46, 0x3f439c690b616bb0, 0x6b4c51f5e41604e6, 0x7e8625d216c2d67d, 0xab67235e6c78d98e, 0xef296b689d7c6d25, 0xc5a0832664c9d40e,
			0x69e962a72ef2f5da, 0x7b0dd45ffa65df1b, 0x496b75ee12145e3d, 0xd918ac7dfcd8137b, 0x1e1d1c0952f53649, 0xfeb479ebe67d40c6, 0x6147aef22145162a, 0x0f800e8a29f41baa,
			0x0000000000000000, 0x990182ef840958a8, 0x975d1b4cc88fb51c, 0x5b8fc316c68374fc, 0x16b3d05c5d42d5b9, 0xb3886aa17dbce183, 0x4f99201851255079, 0x98dd15c6e17baeb6,
			0x06f255f643310e44, 0x6f1b37516dc3fb9e, 0x0cf9aaf186621c88, 0x8e6ec59abc397b0f, 0x930a7de8415a4a64, 0x37ed503c04d68840, 0xf61ab5bee9caa336, 0xfb3f88660ada49a0,
			0x7874702455f3d839, 0x208217493ce6abe7, 0x73a3180af5d23ceb, 0x9e2f4030a24aa0f2, 0xe522946f582f7fe9, 0xd5e1068c7aba0ff3, 0xbdd4f302313a0c37, 0x1fc18b203787c057,
			0xd2cfc4535cf9f7a9, 0x1b96ed84be523f2f, 0x5d7d96e085b27ab8, 0x66696c2d0706ee70, 0xd06af701961d0695, 0xe3d0c1991b1e71ad, 0x6c62932ac255fcbc, 0xd313537a398b01b7,
			0xa0b04b70cc593d5c, 0x834bf8425f299199, 0xaeecd2d380dfd0e8, 0xbead57799eac0b15, 0x540fcd9cef776f56, 0xad9576a82f49d7ca, 0xfc114ab92c99b1fa, 0x33ba36988d037738,
			0xbb26a6f4720b0273, 0xb254fd8818ce179d, 0xa6421e868f683318, 0x5fd8a5b24f568b84, 0x623e0a898ed31108, 0xb0f1cedad22ae6a1, 0x1933ded674b6ce13, 0x1416e30e97a62485,
			0x3e9f0b406e139dae, 0x6dbe0403a7270aa2, 0xbc08642b5448fa29, 0x0d253dd8e310ea96, 0x2ede8eea70604653, 0x39b1c99f485065f4, 0xcd0e4f736b7e37fe, 0xbf71c050fbdefd0b,
			0x748ddad5d391c4b1, 0x0bd7682ea021e4d2, 0x3494f447ab408f62, 0xb4a6a87e5bff19d9, 0x133821d1b1e5dcdf, 0x95f8281e026b4420, 0x2da72a91dff64171, 0x18ef49ff11c4380d,
			0xc705b074ae2d2532, 0x3de6af3bc1859a8c, 0x6835f58e4b8003c4, 0xe787a73d92cb8ed5, 0xc6d9275dcb5fd32c, 0xf7c622978cb85528, 0x4d3c134a9bc1a145, 0xf3914433056daa50,
			0xb7df0c05f4691efb, 0xe175f2cbd1fa8091, 0x77f47eae7c07c393, 0xeb7e0dcc14a9925d, 0xf1347761cf895b6c, 0x08aecc550fb7e3f0, 0x55d35ab58a059948, 0x444e4836f104b4ab,
			0x58f6676d691573de, 0x9ba4b1bd4eeda994, 0x92d6eac12428bc7a, 0xb12d59f3b75810bf, 0xa3c9ef0b63cf3a7e, 0x67b5fb046274186e, 0x2f0219c31512b04d, 0x3266a1b1e8718126,
			0x7628e9871975358d, 0xda610806534e1459, 0x311f05ca47e78604, 0x12e4b6f8d4972ac1, 0x282cdb1c33514817, 0x727f8f2390a0caf5, 0xb57a3f573e8defc7, 0x71062b583f36cdd7,
			0x84653a9d796a69c3, 0xf56311c5465ca414, 0x4737ec4d5e92b389, 0x1cb82f5b9811c775, 0x2509e6c4d041a281, 0xfdcddd9049eb47e4, 0x40192e9278d14bd3, 0x2a89e84ef9b5b92b,
			0x3631c71561a47e5e, 0x8be53417509e7269, 0x24d571edb533549f, 0xc352d6d027f8da4a, 0x01dc97296572f61e, 0xe9db3e9ede4d6361, 0x4e45b7313457a667, 0xf8462c1da54c4e82,
			0x4a12d195bd82591f, 0xff68eec2830fb6d8, 0x176f4775383023a7, 0x48b7e2c77766a823, 0x592af0440c6785c0, 0x2c7bbdb8ba84b76f, 0x5ca101c9e0c08ca6, 0x63e29da0eba1e716,
			0xd698a2f7d52c08d1, 0xce77eb08c4e830dc, 0xde366ea2da9beb21, 0x5a53543fa3f182e2, 0x52fd986aac466112, 0x86c009cfb38e98ff, 0xd1b66028f36ff08b, 0x1a4a7aaddb20c931,
			0xcfab7c21a19ac6c2, 0x09725b7c6ac515ee, 0x0e5c99a34c86edb4, 0xdbbd9f2f363ce247, 0x6a90c6dc8164f2f8, 0x8a39a33e35ec8477, 0xe0a965e2b488768f, 0x7f5ab2fb73b02063,
			0xf4bf86ec232e520a, 0xfae31f4f6fa8bfbe, 0x058bf18deca70966, 0x41c5b9bb1da3bdcd, 0x2b557f679cc74f35, 0xca208dac4d3dcfa4, 0x9a7826942b9f5f8a, 0xf0e8e048aafbad72,
			0x53210f43c934970c, 0xc1f7e582ed1c2b76, 0xc47c140f01bb2210, 0x9d56e44b0ddca7d0, 0x386d5eb62d2293ea, 0xe65b3014f7b978cb, 0x9424bf376719b23e, 0x30c392e32295701a
		}
	};

	static unsigned char S[4][256] = {
		{
			0xA8, 0x43, 0x5F, 0x06, 0x6B, 0x75, 0x6C, 0x59, 0x71, 0xDF, 0x87, 0x95, 0x17, 0xF0, 0xD8, 0x09,
			0x6D, 0xF3, 0x1D, 0xCB, 0xC9, 0x4D, 0x2C, 0xAF, 0x79, 0xE0, 0x97, 0xFD, 0x6F, 0x4B, 0x45, 0x39,
			0x3E, 0xDD, 0xA3, 0x4F, 0xB4, 0xB6, 0x9A, 0x0E, 0x1F, 0xBF, 0x15, 0xE1, 0x49, 0xD2, 0x93, 0xC6,
			0x92, 0x72, 0x9E, 0x61, 0xD1, 0x63, 0xFA, 0xEE, 0xF4, 0x19, 0xD5, 0xAD, 0x58, 0xA4, 0xBB, 0xA1,
			0xDC, 0xF2, 0x83, 0x37, 0x42, 0xE4, 0x7A, 0x32, 0x9C, 0xCC, 0xAB, 0x4A, 0x8F, 0x6E, 0x04, 0x27,
			0x2E, 0xE7, 0xE2, 0x5A, 0x96, 0x16, 0x23, 0x2B, 0xC2, 0x65, 0x66, 0x0F, 0xBC, 0xA9, 0x47, 0x41,
			0x34, 0x48, 0xFC, 0xB7, 0x6A, 0x88, 0xA5, 0x53, 0x86, 0xF9, 0x5B, 0xDB, 0x38, 0x7B, 0xC3, 0x1E,
			0x22, 0x33, 0x24, 0x28, 0x36, 0xC7, 0xB2, 0x3B, 0x8E, 0x77, 0xBA, 0xF5, 0x14, 0x9F, 0x08, 0x55,
			0x9B, 0x4C, 0xFE, 0x60, 0x5C, 0xDA, 0x18, 0x46, 0xCD, 0x7D, 0x21, 0xB0, 0x3F, 0x1B, 0x89, 0xFF,
			0xEB, 0x84, 0x69, 0x3A, 0x9D, 0xD7, 0xD3, 0x70, 0x67, 0x40, 0xB5, 0xDE, 0x5D, 0x30, 0x91, 0xB1,
			0x78, 0x11, 0x01, 0xE5, 0x00, 0x68, 0x98, 0xA0, 0xC5, 0x02, 0xA6, 0x74, 0x2D, 0x0B, 0xA2, 0x76,
			0xB3, 0xBE, 0xCE, 0xBD, 0xAE, 0xE9, 0x8A, 0x31, 0x1C, 0xEC, 0xF1, 0x99, 0x94, 0xAA, 0xF6, 0x26,
			0x2F, 0xEF, 0xE8, 0x8C, 0x35, 0x03, 0xD4, 0x7F, 0xFB, 0x05, 0xC1, 0x5E, 0x90, 0x20, 0x3D, 0x82,
			0xF7, 0xEA, 0x0A, 0x0D, 0x7E, 0xF8, 0x50, 0x1A, 0xC4, 0x07, 0x57, 0xB8, 0x3C, 0x62, 0xE3, 0xC8,
			0xAC, 0x52, 0x64, 0x10, 0xD0, 0xD9, 0x13, 0x0C, 0x12, 0x29, 0x51, 0xB9, 0xCF, 0xD6, 0x73, 0x8D,
			0x81, 0x54, 0xC0, 0xED, 0x4E, 0x44, 0xA7, 0x2A, 0x85, 0x25, 0xE6, 0xCA, 0x7C, 0x8B, 0x56, 0x80
		},
		{
			0xCE, 0xBB, 0xEB, 0x92, 0xEA, 0xCB, 0x13, 0xC1, 0xE9, 0x3A, 0xD6, 0xB2, 0xD2, 0x90, 0x17, 0xF8,
			0x42, 0x15, 0x56, 0xB4, 0x65, 0x1C, 0x88, 0x43, 0xC5, 0x5C, 0x36, 0xBA, 0xF5, 0x57, 0x67, 0x8D,
			0x31, 0xF6, 0x64, 0x58, 0x9E, 0xF4, 0x22, 0xAA, 0x75, 0x0F, 0x02, 0xB1, 0xDF, 0x6D, 0x73, 0x4D,
			0x7C, 0x26, 0x2E, 0xF7, 0x08, 0x5D, 0x44, 0x3E, 0x9F, 0x14, 0xC8, 0xAE, 0x54, 0x10, 0xD8, 0xBC,
			0x1A, 0x6B, 0x69, 0xF3, 0xBD, 0x33, 0xAB, 0xFA, 0xD1, 0x9B, 0x68, 0x4E, 0x16, 0x95, 0x91, 0xEE,
			0x4C, 0x63, 0x8E, 0x5B, 0xCC, 0x3C, 0x19, 0xA1, 0x81, 0x49, 0x7B, 0xD9, 0x6F, 0x37, 0x60, 0xCA,
			0xE7, 0x2B, 0x48, 0xFD, 0x96, 0x45, 0xFC, 0x41, 0x12, 0x0D, 0x79, 0xE5, 0x89, 0x8C, 0xE3, 0x20,
			0x30, 0xDC, 0xB7, 0x6C, 0x4A, 0xB5, 0x3F, 0x97, 0xD4, 0x62, 0x2D, 0x06, 0xA4, 0xA5, 0x83, 0x5F,
			0x2A, 0xDA, 0xC9, 0x00, 0x7E, 0xA2, 0x55, 0xBF, 0x11, 0xD5, 0x9C, 0xCF, 0x0E, 0x0A, 0x3D, 0x51,
			0x7D, 0x93, 0x1B, 0xFE, 0xC4, 0x47, 0x09, 0x86, 0x0B, 0x8F, 0x9D, 0x6A, 0x07, 0xB9, 0xB0, 0x98,
			0x18, 0x32, 0x71, 0x4B, 0xEF, 0x3B, 0x70, 0xA0, 0xE4, 0x40, 0xFF, 0xC3, 0xA9, 0xE6, 0x78, 0xF9,
			0x8B, 0x46, 0x80, 0x1E, 0x38, 0xE1, 0xB8, 0xA8, 0xE0, 0x0C, 0x23, 0x76, 0x1D, 0x25, 0x24, 0x05,
			0xF1, 0x6E, 0x94, 0x28, 0x9A, 0x84, 0xE8, 0xA3, 0x4F, 0x77, 0xD3, 0x85, 0xE2, 0x52, 0xF2, 0x82,
			0x50, 0x7A, 0x2F, 0x74, 0x53, 0xB3, 0x61, 0xAF, 0x39, 0x35, 0xDE, 0xCD, 0x1F, 0x99, 0xAC, 0xAD,
			0x72, 0x2C, 0xDD, 0xD0, 0x87, 0xBE, 0x5E, 0xA6, 0xEC, 0x04, 0xC6, 0x03, 0x34, 0xFB, 0xDB, 0x59,
			0xB6, 0xC2, 0x01, 0xF0, 0x5A, 0xED, 0xA7, 0x66, 0x21, 0x7F, 0x8A, 0x27, 0xC7, 0xC0, 0x29, 0xD7
		},
		{
			0x93, 0xD9, 0x9A, 0xB5, 0x98, 0x22, 0x45, 0xFC, 0xBA, 0x6A, 0xDF, 0x02, 0x9F, 0xDC, 0x51, 0x59,
			0x4A, 0x17, 0x2B, 0xC2, 0x94, 0xF4, 0xBB, 0xA3, 0x62, 0xE4, 0x71, 0xD4, 0xCD, 0x70, 0x16, 0xE1,
			0x49, 0x3C, 0xC0, 0xD8, 0x5C, 0x9B, 0xAD, 0x85, 0x53, 0xA1, 0x7A, 0xC8, 0x2D, 0xE0, 0xD1, 0x72,
			0xA6, 0x2C, 0xC4, 0xE3, 0x76, 0x78, 0xB7, 0xB4, 0x09, 0x3B, 0x0E, 0x41, 0x4C, 0xDE, 0xB2, 0x90,
			0x25, 0xA5, 0xD7, 0x03, 0x11, 0x00, 0xC3, 0x2E, 0x92, 0xEF, 0x4E, 0x12, 0x9D, 0x7D, 0xCB, 0x35,
			0x10, 0xD5, 0x4F, 0x9E, 0x4D, 0xA9, 0x55, 0xC6, 0xD0, 0x7B, 0x18, 0x97, 0xD3, 0x36, 0xE6, 0x48,
			0x56, 0x81, 0x8F, 0x77, 0xCC, 0x9C, 0xB9, 0xE2, 0xAC, 0xB8, 0x2F, 0x15, 0xA4, 0x7C, 0xDA, 0x38,
			0x1E, 0x0B, 0x05, 0xD6, 0x14, 0x6E, 0x6C, 0x7E, 0x66, 0xFD, 0xB1, 0xE5, 0x60, 0xAF, 0x5E, 0x33,
			0x87, 0xC9, 0xF0, 0x5D, 0x6D, 0x3F, 0x88, 0x8D, 0xC7, 0xF7, 0x1D, 0xE9, 0xEC, 0xED, 0x80, 0x29,
			0x27, 0xCF, 0x99, 0xA8, 0x50, 0x0F, 0x37, 0x24, 0x28, 0x30, 0x95, 0xD2, 0x3E, 0x5B, 0x40, 0x83,
			0xB3, 0x69, 0x57, 0x1F, 0x07, 0x1C, 0x8A, 0xBC, 0x20, 0xEB, 0xCE, 0x8E, 0xAB, 0xEE, 0x31, 0xA2,
			0x73, 0xF9, 0xCA, 0x3A, 0x1A, 0xFB, 0x0D, 0xC1, 0xFE, 0xFA, 0xF2, 0x6F, 0xBD, 0x96, 0xDD, 0x43,
			0x52, 0xB6, 0x08, 0xF3, 0xAE, 0xBE, 0x19, 0x89, 0x32, 0x26, 0xB0, 0xEA, 0x4B, 0x64, 0x84, 0x82,
			0x6B, 0xF5, 0x79, 0xBF, 0x01, 0x5F, 0x75, 0x63, 0x1B, 0x23, 0x3D, 0x68, 0x2A, 0x65, 0xE8, 0x91,
			0xF6, 0xFF, 0x13, 0x58, 0xF1, 0x47, 0x0A, 0x7F, 0xC5, 0xA7, 0xE7, 0x61, 0x5A, 0x06, 0x46, 0x44,
			0x42, 0x04, 0xA0, 0xDB, 0x39, 0x86, 0x54, 0xAA, 0x8C, 0x34, 0x21, 0x8B, 0xF8, 0x0C, 0x74, 0x67
		},
		{
			0x68, 0x8D, 0xCA, 0x4D, 0x73, 0x4B, 0x4E, 0x2A, 0xD4, 0x52, 0x26, 0xB3, 0x54, 0x1E, 0x19, 0x1F,
			0x22, 0x03, 0x46, 0x3D, 0x2D, 0x4A, 0x53, 0x83, 0x13, 0x8A, 0xB7, 0xD5, 0x25, 0x79, 0xF5, 0xBD,
			0x58, 0x2F, 0x0D, 0x02, 0xED, 0x51, 0x9E, 0x11, 0xF2, 0x3E, 0x55, 0x5E, 0xD1, 0x16, 0x3C, 0x66,
			0x70, 0x5D, 0xF3, 0x45, 0x40, 0xCC, 0xE8, 0x94, 0x56, 0x08, 0xCE, 0x1A, 0x3A, 0xD2, 0xE1, 0xDF,
			0xB5, 0x38, 0x6E, 0x0E, 0xE5, 0xF4, 0xF9, 0x86, 0xE9, 0x4F, 0xD6, 0x85, 0x23, 0xCF, 0x32, 0x99,
			0x31, 0x14, 0xAE, 0xEE, 0xC8, 0x48, 0xD3, 0x30, 0xA1, 0x92, 0x41, 0xB1, 0x18, 0xC4, 0x2C, 0x71,
			0x72, 0x44, 0x15, 0xFD, 0x37, 0xBE, 0x5F, 0xAA, 0x9B, 0x88, 0xD8, 0xAB, 0x89, 0x9C, 0xFA, 0x60,
			0xEA, 0xBC, 0x62, 0x0C, 0x24, 0xA6, 0xA8, 0xEC, 0x67, 0x20, 0xDB, 0x7C, 0x28, 0xDD, 0xAC, 0x5B,
			0x34, 0x7E, 0x10, 0xF1, 0x7B, 0x8F, 0x63, 0xA0, 0x05, 0x9A, 0x43, 0x77, 0x21, 0xBF, 0x27, 0x09,
			0xC3, 0x9F, 0xB6, 0xD7, 0x29, 0xC2, 0xEB, 0xC0, 0xA4, 0x8B, 0x8C, 0x1D, 0xFB, 0xFF, 0xC1, 0xB2,
			0x97, 0x2E, 0xF8, 0x65, 0xF6, 0x75, 0x07, 0x04, 0x49, 0x33, 0xE4, 0xD9, 0xB9, 0xD0, 0x42, 0xC7,
			0x6C, 0x90, 0x00, 0x8E, 0x6F, 0x50, 0x01, 0xC5, 0xDA, 0x47, 0x3F, 0xCD, 0x69, 0xA2, 0xE2, 0x7A,
			0xA7, 0xC6, 0x93, 0x0F, 0x0A, 0x06, 0xE6, 0x2B, 0x96, 0xA3, 0x1C, 0xAF, 0x6A, 0x12, 0x84, 0x39,
			0xE7, 0xB0, 0x82, 0xF7, 0xFE, 0x9D, 0x87, 0x5C, 0x81, 0x35, 0xDE, 0xB4, 0xA5, 0xFC, 0x80, 0xEF,
			0xCB, 0xBB, 0x6B, 0x76, 0xBA, 0x5A, 0x7D, 0x78, 0x0B, 0x95, 0xE3, 0xAD, 0x74, 0x98, 0x3B, 0x36,
			0x64, 0x6D, 0xDC, 0xF0, 0x59, 0xA9, 0x4C, 0x17, 0x7F, 0x91, 0xB8, 0xC9, 0x57, 0x1B, 0xE0, 0x61
		}
	};

	static unsigned char IS[4][256] = {
		{
			0xA4, 0xA2, 0xA9, 0xC5, 0x4E, 0xC9, 0x03, 0xD9, 0x7E, 0x0F, 0xD2, 0xAD, 0xE7, 0xD3, 0x27, 0x5B,
			0xE3, 0xA1, 0xE8, 0xE6, 0x7C, 0x2A, 0x55, 0x0C, 0x86, 0x39, 0xD7, 0x8D, 0xB8, 0x12, 0x6F, 0x28,
			0xCD, 0x8A, 0x70, 0x56, 0x72, 0xF9, 0xBF, 0x4F, 0x73, 0xE9, 0xF7, 0x57, 0x16, 0xAC, 0x50, 0xC0,
			0x9D, 0xB7, 0x47, 0x71, 0x60, 0xC4, 0x74, 0x43, 0x6C, 0x1F, 0x93, 0x77, 0xDC, 0xCE, 0x20, 0x8C,
			0x99, 0x5F, 0x44, 0x01, 0xF5, 0x1E, 0x87, 0x5E, 0x61, 0x2C, 0x4B, 0x1D, 0x81, 0x15, 0xF4, 0x23,
			0xD6, 0xEA, 0xE1, 0x67, 0xF1, 0x7F, 0xFE, 0xDA, 0x3C, 0x07, 0x53, 0x6A, 0x84, 0x9C, 0xCB, 0x02,
			0x83, 0x33, 0xDD, 0x35, 0xE2, 0x59, 0x5A, 0x98, 0xA5, 0x92, 0x64, 0x04, 0x06, 0x10, 0x4D, 0x1C,
			0x97, 0x08, 0x31, 0xEE, 0xAB, 0x05, 0xAF, 0x79, 0xA0, 0x18, 0x46, 0x6D, 0xFC, 0x89, 0xD4, 0xC7,
			0xFF, 0xF0, 0xCF, 0x42, 0x91, 0xF8, 0x68, 0x0A, 0x65, 0x8E, 0xB6, 0xFD, 0xC3, 0xEF, 0x78, 0x4C,
			0xCC, 0x9E, 0x30, 0x2E, 0xBC, 0x0B, 0x54, 0x1A, 0xA6, 0xBB, 0x26, 0x80, 0x48, 0x94, 0x32, 0x7D,
			0xA7, 0x3F, 0xAE, 0x22, 0x3D, 0x66, 0xAA, 0xF6, 0x00, 0x5D, 0xBD, 0x4A, 0xE0, 0x3B, 0xB4, 0x17,
			0x8B, 0x9F, 0x76, 0xB0, 0x24, 0x9A, 0x25, 0x63, 0xDB, 0xEB, 0x7A, 0x3E, 0x5C, 0xB3, 0xB1, 0x29,
			0xF2, 0xCA, 0x58, 0x6E, 0xD8, 0xA8, 0x2F, 0x75, 0xDF, 0x14, 0xFB, 0x13, 0x49, 0x88, 0xB2, 0xEC,
			0xE4, 0x34, 0x2D, 0x96, 0xC6, 0x3A, 0xED, 0x95, 0x0E, 0xE5, 0x85, 0x6B, 0x40, 0x21, 0x9B, 0x09,
			0x19, 0x2B, 0x52, 0xDE, 0x45, 0xA3, 0xFA, 0x51, 0xC2, 0xB5, 0xD1, 0x90, 0xB9, 0xF3, 0x37, 0xC1,
			0x0D, 0xBA, 0x41, 0x11, 0x38, 0x7B, 0xBE, 0xD0, 0xD5, 0x69, 0x36, 0xC8, 0x62, 0x1B, 0x82, 0x8F
		},
		{
			0x83, 0xF2, 0x2A, 0xEB, 0xE9, 0xBF, 0x7B, 0x9C, 0x34, 0x96, 0x8D, 0x98, 0xB9, 0x69, 0x8C, 0x29,
			0x3D, 0x88, 0x68, 0x06, 0x39, 0x11, 0x4C, 0x0E, 0xA0, 0x56, 0x40, 0x92, 0x15, 0xBC, 0xB3, 0xDC,
			0x6F, 0xF8, 0x26, 0xBA, 0xBE, 0xBD, 0x31, 0xFB, 0xC3, 0xFE, 0x80, 0x61, 0xE1, 0x7A, 0x32, 0xD2,
			0x70, 0x20, 0xA1, 0x45, 0xEC, 0xD9, 0x1A, 0x5D, 0xB4, 0xD8, 0x09, 0xA5, 0x55, 0x8E, 0x37, 0x76,
			0xA9, 0x67, 0x10, 0x17, 0x36, 0x65, 0xB1, 0x95, 0x62, 0x59, 0x74, 0xA3, 0x50, 0x2F, 0x4B, 0xC8,
			0xD0, 0x8F, 0xCD, 0xD4, 0x3C, 0x86, 0x12, 0x1D, 0x23, 0xEF, 0xF4, 0x53, 0x19, 0x35, 0xE6, 0x7F,
			0x5E, 0xD6, 0x79, 0x51, 0x22, 0x14, 0xF7, 0x1E, 0x4A, 0x42, 0x9B, 0x41, 0x73, 0x2D, 0xC1, 0x5C,
			0xA6, 0xA2, 0xE0, 0x2E, 0xD3, 0x28, 0xBB, 0xC9, 0xAE, 0x6A, 0xD1, 0x5A, 0x30, 0x90, 0x84, 0xF9,
			0xB2, 0x58, 0xCF, 0x7E, 0xC5, 0xCB, 0x97, 0xE4, 0x16, 0x6C, 0xFA, 0xB0, 0x6D, 0x1F, 0x52, 0x99,
			0x0D, 0x4E, 0x03, 0x91, 0xC2, 0x4D, 0x64, 0x77, 0x9F, 0xDD, 0xC4, 0x49, 0x8A, 0x9A, 0x24, 0x38,
			0xA7, 0x57, 0x85, 0xC7, 0x7C, 0x7D, 0xE7, 0xF6, 0xB7, 0xAC, 0x27, 0x46, 0xDE, 0xDF, 0x3B, 0xD7,
			0x9E, 0x2B, 0x0B, 0xD5, 0x13, 0x75, 0xF0, 0x72, 0xB6, 0x9D, 0x1B, 0x01, 0x3F, 0x44, 0xE5, 0x87,
			0xFD, 0x07, 0xF1, 0xAB, 0x94, 0x18, 0xEA, 0xFC, 0x3A, 0x82, 0x5F, 0x05, 0x54, 0xDB, 0x00, 0x8B,
			0xE3, 0x48, 0x0C, 0xCA, 0x78, 0x89, 0x0A, 0xFF, 0x3E, 0x5B, 0x81, 0xEE, 0x71, 0xE2, 0xDA, 0x2C,
			0xB8, 0xB5, 0xCC, 0x6E, 0xA8, 0x6B, 0xAD, 0x60, 0xC6, 0x08, 0x04, 0x02, 0xE8, 0xF5, 0x4F, 0xA4,
			0xF3, 0xC0, 0xCE, 0x43, 0x25, 0x1C, 0x21, 0x33, 0x0F, 0xAF, 0x47, 0xED, 0x66, 0x63, 0x93, 0xAA
		},
		{
			0x45, 0xD4, 0x0B, 0x43, 0xF1, 0x72, 0xED, 0xA4, 0xC2, 0x38, 0xE6, 0x71, 0xFD, 0xB6, 0x3A, 0x95,
			0x50, 0x44, 0x4B, 0xE2, 0x74, 0x6B, 0x1E, 0x11, 0x5A, 0xC6, 0xB4, 0xD8, 0xA5, 0x8A, 0x70, 0xA3,
			0xA8, 0xFA, 0x05, 0xD9, 0x97, 0x40, 0xC9, 0x90, 0x98, 0x8F, 0xDC, 0x12, 0x31, 0x2C, 0x47, 0x6A,
			0x99, 0xAE, 0xC8, 0x7F, 0xF9, 0x4F, 0x5D, 0x96, 0x6F, 0xF4, 0xB3, 0x39, 0x21, 0xDA, 0x9C, 0x85,
			0x9E, 0x3B, 0xF0, 0xBF, 0xEF, 0x06, 0xEE, 0xE5, 0x5F, 0x20, 0x10, 0xCC, 0x3C, 0x54, 0x4A, 0x52,
			0x94, 0x0E, 0xC0, 0x28, 0xF6, 0x56, 0x60, 0xA2, 0xE3, 0x0F, 0xEC, 0x9D, 0x24, 0x83, 0x7E, 0xD5,
			0x7C, 0xEB, 0x18, 0xD7, 0xCD, 0xDD, 0x78, 0xFF, 0xDB, 0xA1, 0x09, 0xD0, 0x76, 0x84, 0x75, 0xBB,
			0x1D, 0x1A, 0x2F, 0xB0, 0xFE, 0xD6, 0x34, 0x63, 0x35, 0xD2, 0x2A, 0x59, 0x6D, 0x4D, 0x77, 0xE7,
			0x8E, 0x61, 0xCF, 0x9F, 0xCE, 0x27, 0xF5, 0x80, 0x86, 0xC7, 0xA6, 0xFB, 0xF8, 0x87, 0xAB, 0x62,
			0x3F, 0xDF, 0x48, 0x00, 0x14, 0x9A, 0xBD, 0x5B, 0x04, 0x92, 0x02, 0x25, 0x65, 0x4C, 0x53, 0x0C,
			0xF2, 0x29, 0xAF, 0x17, 0x6C, 0x41, 0x30, 0xE9, 0x93, 0x55, 0xF7, 0xAC, 0x68, 0x26, 0xC4, 0x7D,
			0xCA, 0x7A, 0x3E, 0xA0, 0x37, 0x03, 0xC1, 0x36, 0x69, 0x66, 0x08, 0x16, 0xA7, 0xBC, 0xC5, 0xD3,
			0x22, 0xB7, 0x13, 0x46, 0x32, 0xE8, 0x57, 0x88, 0x2B, 0x81, 0xB2, 0x4E, 0x64, 0x1C, 0xAA, 0x91,
			0x58, 0x2E, 0x9B, 0x5C, 0x1B, 0x51, 0x73, 0x42, 0x23, 0x01, 0x6E, 0xF3, 0x0D, 0xBE, 0x3D, 0x0A,
			0x2D, 0x1F, 0x67, 0x33, 0x19, 0x7B, 0x5E, 0xEA, 0xDE, 0x8B, 0xCB, 0xA9, 0x8C, 0x8D, 0xAD, 0x49,
			0x82, 0xE4, 0xBA, 0xC3, 0x15, 0xD1, 0xE0, 0x89, 0xFC, 0xB1, 0xB9, 0xB5, 0x07, 0x79, 0xB8, 0xE1
		},
		{
			0xB2, 0xB6, 0x23, 0x11, 0xA7, 0x88, 0xC5, 0xA6, 0x39, 0x8F, 0xC4, 0xE8, 0x73, 0x22, 0x43, 0xC3,
			0x82, 0x27, 0xCD, 0x18, 0x51, 0x62, 0x2D, 0xF7, 0x5C, 0x0E, 0x3B, 0xFD, 0xCA, 0x9B, 0x0D, 0x0F,
			0x79, 0x8C, 0x10, 0x4C, 0x74, 0x1C, 0x0A, 0x8E, 0x7C, 0x94, 0x07, 0xC7, 0x5E, 0x14, 0xA1, 0x21,
			0x57, 0x50, 0x4E, 0xA9, 0x80, 0xD9, 0xEF, 0x64, 0x41, 0xCF, 0x3C, 0xEE, 0x2E, 0x13, 0x29, 0xBA,
			0x34, 0x5A, 0xAE, 0x8A, 0x61, 0x33, 0x12, 0xB9, 0x55, 0xA8, 0x15, 0x05, 0xF6, 0x03, 0x06, 0x49,
			0xB5, 0x25, 0x09, 0x16, 0x0C, 0x2A, 0x38, 0xFC, 0x20, 0xF4, 0xE5, 0x7F, 0xD7, 0x31, 0x2B, 0x66,
			0x6F, 0xFF, 0x72, 0x86, 0xF0, 0xA3, 0x2F, 0x78, 0x00, 0xBC, 0xCC, 0xE2, 0xB0, 0xF1, 0x42, 0xB4,
			0x30, 0x5F, 0x60, 0x04, 0xEC, 0xA5, 0xE3, 0x8B, 0xE7, 0x1D, 0xBF, 0x84, 0x7B, 0xE6, 0x81, 0xF8,
			0xDE, 0xD8, 0xD2, 0x17, 0xCE, 0x4B, 0x47, 0xD6, 0x69, 0x6C, 0x19, 0x99, 0x9A, 0x01, 0xB3, 0x85,
			0xB1, 0xF9, 0x59, 0xC2, 0x37, 0xE9, 0xC8, 0xA0, 0xED, 0x4F, 0x89, 0x68, 0x6D, 0xD5, 0x26, 0x91,
			0x87, 0x58, 0xBD, 0xC9, 0x98, 0xDC, 0x75, 0xC0, 0x76, 0xF5, 0x67, 0x6B, 0x7E, 0xEB, 0x52, 0xCB,
			0xD1, 0x5B, 0x9F, 0x0B, 0xDB, 0x40, 0x92, 0x1A, 0xFA, 0xAC, 0xE4, 0xE1, 0x71, 0x1F, 0x65, 0x8D,
			0x97, 0x9E, 0x95, 0x90, 0x5D, 0xB7, 0xC1, 0xAF, 0x54, 0xFB, 0x02, 0xE0, 0x35, 0xBB, 0x3A, 0x4D,
			0xAD, 0x2C, 0x3D, 0x56, 0x08, 0x1B, 0x4A, 0x93, 0x6A, 0xAB, 0xB8, 0x7A, 0xF2, 0x7D, 0xDA, 0x3F,
			0xFE, 0x3E, 0xBE, 0xEA, 0xAA, 0x44, 0xC6, 0xD0, 0x36, 0x48, 0x70, 0x96, 0x77, 0x24, 0x53, 0xDF,
			0xF3, 0x83, 0x28, 0x32, 0x45, 0x1E, 0xA4, 0xD3, 0xA2, 0x46, 0x6E, 0x9C, 0xDD, 0x63, 0xD4, 0x9D
		}
	};

	kalyna512_512::~kalyna512_512()
	{
		clear();
	}

	void kalyna512_512::clear()
	{
		zero_memory(rk, sizeof(rk));
	}

	static inline void G0(const uint64_t* x, uint64_t* y)
	{
		y[0] = KUPYNA_T[0][(unsigned char)x[0]] ^ KUPYNA_T[1][(unsigned char)(x[7] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[6] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[5] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[4] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[3] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[2] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[1] >> 56)];
		y[1] = KUPYNA_T[0][(unsigned char)x[1]] ^ KUPYNA_T[1][(unsigned char)(x[0] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[7] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[6] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[5] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[4] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[3] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[2] >> 56)];
		y[2] = KUPYNA_T[0][(unsigned char)x[2]] ^ KUPYNA_T[1][(unsigned char)(x[1] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[0] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[7] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[6] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[5] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[4] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[3] >> 56)];
		y[3] = KUPYNA_T[0][(unsigned char)x[3]] ^ KUPYNA_T[1][(unsigned char)(x[2] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[1] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[0] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[7] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[6] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[5] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[4] >> 56)];
		y[4] = KUPYNA_T[0][(unsigned char)x[4]] ^ KUPYNA_T[1][(unsigned char)(x[3] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[2] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[1] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[0] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[7] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[6] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[5] >> 56)];
		y[5] = KUPYNA_T[0][(unsigned char)x[5]] ^ KUPYNA_T[1][(unsigned char)(x[4] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[3] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[2] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[1] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[0] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[7] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[6] >> 56)];
		y[6] = KUPYNA_T[0][(unsigned char)x[6]] ^ KUPYNA_T[1][(unsigned char)(x[5] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[4] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[3] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[2] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[1] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[0] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[7] >> 56)];
		y[7] = KUPYNA_T[0][(unsigned char)x[7]] ^ KUPYNA_T[1][(unsigned char)(x[6] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[5] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[4] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[3] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[2] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[1] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[0] >> 56)];
	}

	static inline void G(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = k[0] ^ KUPYNA_T[0][(unsigned char)x[0]] ^ KUPYNA_T[1][(unsigned char)(x[7] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[6] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[5] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[4] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[3] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[2] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[1] >> 56)];
		y[1] = k[1] ^ KUPYNA_T[0][(unsigned char)x[1]] ^ KUPYNA_T[1][(unsigned char)(x[0] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[7] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[6] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[5] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[4] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[3] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[2] >> 56)];
		y[2] = k[2] ^ KUPYNA_T[0][(unsigned char)x[2]] ^ KUPYNA_T[1][(unsigned char)(x[1] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[0] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[7] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[6] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[5] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[4] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[3] >> 56)];
		y[3] = k[3] ^ KUPYNA_T[0][(unsigned char)x[3]] ^ KUPYNA_T[1][(unsigned char)(x[2] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[1] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[0] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[7] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[6] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[5] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[4] >> 56)];
		y[4] = k[4] ^ KUPYNA_T[0][(unsigned char)x[4]] ^ KUPYNA_T[1][(unsigned char)(x[3] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[2] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[1] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[0] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[7] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[6] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[5] >> 56)];
		y[5] = k[5] ^ KUPYNA_T[0][(unsigned char)x[5]] ^ KUPYNA_T[1][(unsigned char)(x[4] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[3] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[2] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[1] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[0] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[7] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[6] >> 56)];
		y[6] = k[6] ^ KUPYNA_T[0][(unsigned char)x[6]] ^ KUPYNA_T[1][(unsigned char)(x[5] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[4] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[3] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[2] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[1] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[0] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[7] >> 56)];
		y[7] = k[7] ^ KUPYNA_T[0][(unsigned char)x[7]] ^ KUPYNA_T[1][(unsigned char)(x[6] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[5] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[4] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[3] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[2] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[1] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[0] >> 56)];
	}

	static inline void GL(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = k[0] + (KUPYNA_T[0][(unsigned char)x[0]] ^ KUPYNA_T[1][(unsigned char)(x[7] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[6] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[5] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[4] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[3] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[2] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[1] >> 56)]);
		y[1] = k[1] + (KUPYNA_T[0][(unsigned char)x[1]] ^ KUPYNA_T[1][(unsigned char)(x[0] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[7] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[6] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[5] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[4] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[3] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[2] >> 56)]);
		y[2] = k[2] + (KUPYNA_T[0][(unsigned char)x[2]] ^ KUPYNA_T[1][(unsigned char)(x[1] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[0] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[7] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[6] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[5] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[4] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[3] >> 56)]);
		y[3] = k[3] + (KUPYNA_T[0][(unsigned char)x[3]] ^ KUPYNA_T[1][(unsigned char)(x[2] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[1] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[0] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[7] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[6] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[5] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[4] >> 56)]);
		y[4] = k[4] + (KUPYNA_T[0][(unsigned char)x[4]] ^ KUPYNA_T[1][(unsigned char)(x[3] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[2] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[1] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[0] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[7] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[6] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[5] >> 56)]);
		y[5] = k[5] + (KUPYNA_T[0][(unsigned char)x[5]] ^ KUPYNA_T[1][(unsigned char)(x[4] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[3] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[2] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[1] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[0] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[7] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[6] >> 56)]);
		y[6] = k[6] + (KUPYNA_T[0][(unsigned char)x[6]] ^ KUPYNA_T[1][(unsigned char)(x[5] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[4] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[3] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[2] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[1] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[0] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[7] >> 56)]);
		y[7] = k[7] + (KUPYNA_T[0][(unsigned char)x[7]] ^ KUPYNA_T[1][(unsigned char)(x[6] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[5] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[4] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[3] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[2] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[1] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[0] >> 56)]);
	}

	static inline void IMC(uint64_t* x)
	{
		x[0] = IT[0][S[0][(unsigned char)x[0]]] ^ IT[1][S[1][(unsigned char)(x[0] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[0] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[0] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[0] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[0] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[0] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[0] >> 56)]];
		x[1] = IT[0][S[0][(unsigned char)x[1]]] ^ IT[1][S[1][(unsigned char)(x[1] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[1] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[1] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[1] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[1] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[1] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[1] >> 56)]];
		x[2] = IT[0][S[0][(unsigned char)x[2]]] ^ IT[1][S[1][(unsigned char)(x[2] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[2] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[2] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[2] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[2] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[2] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[2] >> 56)]];
		x[3] = IT[0][S[0][(unsigned char)x[3]]] ^ IT[1][S[1][(unsigned char)(x[3] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[3] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[3] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[3] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[3] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[3] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[3] >> 56)]];
		x[4] = IT[0][S[0][(unsigned char)x[4]]] ^ IT[1][S[1][(unsigned char)(x[4] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[4] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[4] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[4] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[4] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[4] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[4] >> 56)]];
		x[5] = IT[0][S[0][(unsigned char)x[5]]] ^ IT[1][S[1][(unsigned char)(x[5] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[5] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[5] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[5] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[5] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[5] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[5] >> 56)]];
		x[6] = IT[0][S[0][(unsigned char)x[6]]] ^ IT[1][S[1][(unsigned char)(x[6] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[6] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[6] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[6] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[6] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[6] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[6] >> 56)]];
		x[7] = IT[0][S[0][(unsigned char)x[7]]] ^ IT[1][S[1][(unsigned char)(x[7] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[7] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[7] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[7] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[7] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[7] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[7] >> 56)]];
	}

	static inline void IG(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = k[0] ^ IT[0][(unsigned char)x[0]] ^ IT[1][(unsigned char)(x[1] >> 8)] ^ IT[2][(unsigned char)(x[2] >> 16)] ^ IT[3][(unsigned char)(x[3] >> 24)] ^
			IT[4][(unsigned char)(x[4] >> 32)] ^ IT[5][(unsigned char)(x[5] >> 40)] ^ IT[6][(unsigned char)(x[6] >> 48)] ^ IT[7][(unsigned char)(x[7] >> 56)];
		y[1] = k[1] ^ IT[0][(unsigned char)x[1]] ^ IT[1][(unsigned char)(x[2] >> 8)] ^ IT[2][(unsigned char)(x[3] >> 16)] ^ IT[3][(unsigned char)(x[4] >> 24)] ^
			IT[4][(unsigned char)(x[5] >> 32)] ^ IT[5][(unsigned char)(x[6] >> 40)] ^ IT[6][(unsigned char)(x[7] >> 48)] ^ IT[7][(unsigned char)(x[0] >> 56)];
		y[2] = k[2] ^ IT[0][(unsigned char)x[2]] ^ IT[1][(unsigned char)(x[3] >> 8)] ^ IT[2][(unsigned char)(x[4] >> 16)] ^ IT[3][(unsigned char)(x[5] >> 24)] ^
			IT[4][(unsigned char)(x[6] >> 32)] ^ IT[5][(unsigned char)(x[7] >> 40)] ^ IT[6][(unsigned char)(x[0] >> 48)] ^ IT[7][(unsigned char)(x[1] >> 56)];
		y[3] = k[3] ^ IT[0][(unsigned char)x[3]] ^ IT[1][(unsigned char)(x[4] >> 8)] ^ IT[2][(unsigned char)(x[5] >> 16)] ^ IT[3][(unsigned char)(x[6] >> 24)] ^
			IT[4][(unsigned char)(x[7] >> 32)] ^ IT[5][(unsigned char)(x[0] >> 40)] ^ IT[6][(unsigned char)(x[1] >> 48)] ^ IT[7][(unsigned char)(x[2] >> 56)];
		y[4] = k[4] ^ IT[0][(unsigned char)x[4]] ^ IT[1][(unsigned char)(x[5] >> 8)] ^ IT[2][(unsigned char)(x[6] >> 16)] ^ IT[3][(unsigned char)(x[7] >> 24)] ^
			IT[4][(unsigned char)(x[0] >> 32)] ^ IT[5][(unsigned char)(x[1] >> 40)] ^ IT[6][(unsigned char)(x[2] >> 48)] ^ IT[7][(unsigned char)(x[3] >> 56)];
		y[5] = k[5] ^ IT[0][(unsigned char)x[5]] ^ IT[1][(unsigned char)(x[6] >> 8)] ^ IT[2][(unsigned char)(x[7] >> 16)] ^ IT[3][(unsigned char)(x[0] >> 24)] ^
			IT[4][(unsigned char)(x[1] >> 32)] ^ IT[5][(unsigned char)(x[2] >> 40)] ^ IT[6][(unsigned char)(x[3] >> 48)] ^ IT[7][(unsigned char)(x[4] >> 56)];
		y[6] = k[6] ^ IT[0][(unsigned char)x[6]] ^ IT[1][(unsigned char)(x[7] >> 8)] ^ IT[2][(unsigned char)(x[0] >> 16)] ^ IT[3][(unsigned char)(x[1] >> 24)] ^
			IT[4][(unsigned char)(x[2] >> 32)] ^ IT[5][(unsigned char)(x[3] >> 40)] ^ IT[6][(unsigned char)(x[4] >> 48)] ^ IT[7][(unsigned char)(x[5] >> 56)];
		y[7] = k[7] ^ IT[0][(unsigned char)x[7]] ^ IT[1][(unsigned char)(x[0] >> 8)] ^ IT[2][(unsigned char)(x[1] >> 16)] ^ IT[3][(unsigned char)(x[2] >> 24)] ^
			IT[4][(unsigned char)(x[3] >> 32)] ^ IT[5][(unsigned char)(x[4] >> 40)] ^ IT[6][(unsigned char)(x[5] >> 48)] ^ IT[7][(unsigned char)(x[6] >> 56)];
	}

	static inline void IGL(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = (uint64_t(IS[0][(unsigned char)x[0]]) ^ uint64_t(IS[1][(unsigned char)(x[1] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[2] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[3] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[4] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[5] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[6] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[7] >> 56)]) << 56) - k[0];
		y[1] = (uint64_t(IS[0][(unsigned char)x[1]]) ^ uint64_t(IS[1][(unsigned char)(x[2] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[3] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[4] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[5] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[6] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[7] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[0] >> 56)]) << 56) - k[1];
		y[2] = (uint64_t(IS[0][(unsigned char)x[2]]) ^ uint64_t(IS[1][(unsigned char)(x[3] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[4] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[5] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[6] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[7] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[0] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[1] >> 56)]) << 56) - k[2];
		y[3] = (uint64_t(IS[0][(unsigned char)x[3]]) ^ uint64_t(IS[1][(unsigned char)(x[4] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[5] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[6] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[7] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[0] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[1] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[2] >> 56)]) << 56) - k[3];
		y[4] = (uint64_t(IS[0][(unsigned char)x[4]]) ^ uint64_t(IS[1][(unsigned char)(x[5] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[6] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[7] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[0] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[1] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[2] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[3] >> 56)]) << 56) - k[4];
		y[5] = (uint64_t(IS[0][(unsigned char)x[5]]) ^ uint64_t(IS[1][(unsigned char)(x[6] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[7] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[0] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[1] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[2] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[3] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[4] >> 56)]) << 56) - k[5];
		y[6] = (uint64_t(IS[0][(unsigned char)x[6]]) ^ uint64_t(IS[1][(unsigned char)(x[7] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[0] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[1] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[2] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[3] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[4] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[5] >> 56)]) << 56) - k[6];
		y[7] = (uint64_t(IS[0][(unsigned char)x[7]]) ^ uint64_t(IS[1][(unsigned char)(x[0] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[1] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[2] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[3] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[4] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[5] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[6] >> 56)]) << 56) - k[7];
	}

	static inline void addkey(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = x[0] + k[0];
		y[1] = x[1] + k[1];
		y[2] = x[2] + k[2];
		y[3] = x[3] + k[3];
		y[4] = x[4] + k[4];
		y[5] = x[5] + k[5];
		y[6] = x[6] + k[6];
		y[7] = x[7] + k[7];
	}

	static inline void subkey(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = x[0] - k[0];
		y[1] = x[1] - k[1];
		y[2] = x[2] - k[2];
		y[3] = x[3] - k[3];
		y[4] = x[4] - k[4];
		y[5] = x[5] - k[5];
		y[6] = x[6] - k[6];
		y[7] = x[7] - k[7];
	}

	void kalyna512_512::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[8], t2[8];
		addkey((const uint64_t*)in, t1, rk);

		G(t1, t2, &rk[8]); // 1
		G(t2, t1, &rk[16]); // 2
		G(t1, t2, &rk[24]); // 3
		G(t2, t1, &rk[32]); // 4
		G(t1, t2, &rk[40]); // 5
		G(t2, t1, &rk[48]); // 6
		G(t1, t2, &rk[56]); // 7
		G(t2, t1, &rk[64]); // 8
		G(t1, t2, &rk[72]); // 9
		G(t2, t1, &rk[80]); // 10
		G(t1, t2, &rk[88]); // 11
		G(t2, t1, &rk[96]); // 12
		G(t1, t2, &rk[104]); // 13
		G(t2, t1, &rk[112]); // 14
		G(t1, t2, &rk[120]); // 15
		G(t2, t1, &rk[128]); // 16
		G(t1, t2, &rk[136]); // 17
		GL(t2, t1, &rk[144]); // 18

		memcpy(out, t1, 512 / 8);
	}

	void kalyna512_512::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[8], t2[8];
		subkey((const uint64_t*)in, t1, &rk[144]);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 8; i++)
			printf("subroundkey[%d]: %016I64x\n", i, t1[i]);
#endif
		
		IMC(t1);
		IG(t1, t2, &rk[136]);
		IG(t2, t1, &rk[128]);
		IG(t1, t2, &rk[120]);
		IG(t2, t1, &rk[112]);
		IG(t1, t2, &rk[104]);
		IG(t2, t1, &rk[96]);
		IG(t1, t2, &rk[88]);
		IG(t2, t1, &rk[80]);
		IG(t1, t2, &rk[72]);
		IG(t2, t1, &rk[64]);
		IG(t1, t2, &rk[56]);
		IG(t2, t1, &rk[48]);
		IG(t1, t2, &rk[40]);
		IG(t2, t1, &rk[32]);
		IG(t1, t2, &rk[24]);
		IG(t2, t1, &rk[16]);
		IG(t1, t2, &rk[8]);
		IGL(t2, t1, &rk[0]);

		memcpy(out, t1, 512 / 8);
	}

	static inline void swap_block(uint64_t* k)
	{
		uint64_t t = k[0];
		k[0] = k[1];
		k[1] = k[2];
		k[2] = k[3];
		k[3] = k[4];
		k[4] = k[5];
		k[5] = k[6];
		k[6] = k[7];
		k[7] = t;
	}

	static inline void add_constant(uint64_t* src, uint64_t* dst, uint64_t constant)
	{
		for (int i = 0; i < 8; i++)
			dst[i] = src[i] + constant;
	}

	static inline void make_odd_key(const uint64_t* evenkey, uint64_t* oddkey)
	{
		memcpy(oddkey, ((const unsigned char*)evenkey) + 19, 64 - 19);
		memcpy(((unsigned char*)oddkey) + 64 - 19, evenkey, 19);
	}

	bool kalyna512_512::init(const unsigned char* key, block_cipher::direction direction)
	{
		uint64_t ks[8], ksc[8], t1[8], t2[8], k[8];
		memset(t1, 0, sizeof(t1));
		t1[0] = (512 + 512 + 64) / 64;
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 8; i++)
			printf("ks-0-t1[%d]: %016I64x\n", i, t1[i]);
#endif
		addkey(t1, t2, (const uint64_t*)key);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 8; i++)
			printf("ks-0-add[%d]: %016I64x\n", i, t2[i]);
#endif
		G(t2, t1, (const uint64_t*)key);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 8; i++)
			printf("ks-0-r0[%d]: %016I64x\n", i, t1[i]);
#endif
		GL(t1, t2, (const uint64_t*)key);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 8; i++)
			printf("ks-0-r1[%d]: %016I64x\n", i, t2[i]);
#endif
		G0(t2, ks);

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 8; i++)
			printf("ks[%d]: %016I64x\n", i, ks[i]);
#endif

		uint64_t constant = 0x0001000100010001;

		// round 0
		memcpy(k, key, 512 / 8);
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[0], ksc);
		make_odd_key(&rk[0], &rk[8]);

		// round 2
		swap_block(k);
		constant <<= 1;
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[16], ksc);
		make_odd_key(&rk[16], &rk[24]);

		// round 4
		swap_block(k);
		constant <<= 1;
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[32], ksc);
		make_odd_key(&rk[32], &rk[40]);

		// round 6
		swap_block(k);
		constant <<= 1;
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[48], ksc);
		make_odd_key(&rk[48], &rk[56]);

		// round 8
		swap_block(k);
		constant <<= 1;
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[64], ksc);
		make_odd_key(&rk[64], &rk[72]);

		// round 10
		swap_block(k);
		constant <<= 1;
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[80], ksc);
		make_odd_key(&rk[80], &rk[88]);

		// round 12
		swap_block(k);
		constant <<= 1;
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[96], ksc);
		make_odd_key(&rk[96], &rk[104]);

		// round 14
		swap_block(k);
		constant <<= 1;
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[112], ksc);
		make_odd_key(&rk[112], &rk[120]);

		// round 16
		swap_block(k);
		constant <<= 1;
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[128], ksc);
		make_odd_key(&rk[128], &rk[136]);

		// round 18
		swap_block(k);
		constant <<= 1;
		add_constant(ks, ksc, constant);
		addkey(k, t2, ksc);
		G(t2, t1, ksc);
		GL(t1, &rk[144], ksc);

		if (direction == decryption)
		{
			IMC(&rk[136]);
			IMC(&rk[128]);
			IMC(&rk[120]);
			IMC(&rk[112]);
			IMC(&rk[104]);
			IMC(&rk[96]);
			IMC(&rk[88]);
			IMC(&rk[80]);
			IMC(&rk[72]);
			IMC(&rk[64]);
			IMC(&rk[56]);
			IMC(&rk[48]);
			IMC(&rk[40]);
			IMC(&rk[32]);
			IMC(&rk[24]);
			IMC(&rk[16]);
			IMC(&rk[8]);
		}

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < sizeof(rk) / sizeof(*rk); i++)
			printf("rk[%d]: %016I64x\n", i, rk[i]);
#endif

		return true;
	}

	static inline void addkey256(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = x[0] + k[0];
		y[1] = x[1] + k[1];
		y[2] = x[2] + k[2];
		y[3] = x[3] + k[3];
	}

	static inline void subkey256(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = x[0] - k[0];
		y[1] = x[1] - k[1];
		y[2] = x[2] - k[2];
		y[3] = x[3] - k[3];
	}

	static inline void G0256(const uint64_t* x, uint64_t* y)
	{
		y[0] = KUPYNA_T[0][(unsigned char)x[0]] ^ KUPYNA_T[1][(unsigned char)(x[0] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[3] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[3] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[2] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[2] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[1] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[1] >> 56)];
		y[1] = KUPYNA_T[0][(unsigned char)x[1]] ^ KUPYNA_T[1][(unsigned char)(x[1] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[0] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[0] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[3] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[3] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[2] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[2] >> 56)];
		y[2] = KUPYNA_T[0][(unsigned char)x[2]] ^ KUPYNA_T[1][(unsigned char)(x[2] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[1] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[1] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[0] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[0] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[3] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[3] >> 56)];
		y[3] = KUPYNA_T[0][(unsigned char)x[3]] ^ KUPYNA_T[1][(unsigned char)(x[3] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[2] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[2] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[1] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[1] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[0] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[0] >> 56)];
	}

	static inline void G256(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = k[0] ^ KUPYNA_T[0][(unsigned char)x[0]] ^ KUPYNA_T[1][(unsigned char)(x[0] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[3] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[3] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[2] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[2] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[1] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[1] >> 56)];
		y[1] = k[1] ^ KUPYNA_T[0][(unsigned char)x[1]] ^ KUPYNA_T[1][(unsigned char)(x[1] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[0] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[0] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[3] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[3] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[2] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[2] >> 56)];
		y[2] = k[2] ^ KUPYNA_T[0][(unsigned char)x[2]] ^ KUPYNA_T[1][(unsigned char)(x[2] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[1] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[1] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[0] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[0] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[3] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[3] >> 56)];
		y[3] = k[3] ^ KUPYNA_T[0][(unsigned char)x[3]] ^ KUPYNA_T[1][(unsigned char)(x[3] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[2] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[2] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[1] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[1] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[0] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[0] >> 56)];
	}

	static inline void GL256(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = k[0] + (KUPYNA_T[0][(unsigned char)x[0]] ^ KUPYNA_T[1][(unsigned char)(x[0] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[3] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[3] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[2] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[2] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[1] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[1] >> 56)]);
		y[1] = k[1] + (KUPYNA_T[0][(unsigned char)x[1]] ^ KUPYNA_T[1][(unsigned char)(x[1] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[0] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[0] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[3] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[3] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[2] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[2] >> 56)]);
		y[2] = k[2] + (KUPYNA_T[0][(unsigned char)x[2]] ^ KUPYNA_T[1][(unsigned char)(x[2] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[1] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[1] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[0] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[0] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[3] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[3] >> 56)]);
		y[3] = k[3] + (KUPYNA_T[0][(unsigned char)x[3]] ^ KUPYNA_T[1][(unsigned char)(x[3] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[2] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[2] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[1] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[1] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[0] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[0] >> 56)]);
	}

	static inline void IMC256(uint64_t* x)
	{
		x[0] = IT[0][S[0][(unsigned char)x[0]]] ^ IT[1][S[1][(unsigned char)(x[0] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[0] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[0] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[0] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[0] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[0] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[0] >> 56)]];
		x[1] = IT[0][S[0][(unsigned char)x[1]]] ^ IT[1][S[1][(unsigned char)(x[1] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[1] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[1] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[1] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[1] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[1] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[1] >> 56)]];
		x[2] = IT[0][S[0][(unsigned char)x[2]]] ^ IT[1][S[1][(unsigned char)(x[2] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[2] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[2] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[2] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[2] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[2] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[2] >> 56)]];
		x[3] = IT[0][S[0][(unsigned char)x[3]]] ^ IT[1][S[1][(unsigned char)(x[3] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[3] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[3] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[3] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[3] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[3] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[3] >> 56)]];
	}

	static inline void IG256(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = k[0] ^ IT[0][(unsigned char)x[0]] ^ IT[1][(unsigned char)(x[0] >> 8)] ^ IT[2][(unsigned char)(x[1] >> 16)] ^ IT[3][(unsigned char)(x[1] >> 24)] ^
			IT[4][(unsigned char)(x[2] >> 32)] ^ IT[5][(unsigned char)(x[2] >> 40)] ^ IT[6][(unsigned char)(x[3] >> 48)] ^ IT[7][(unsigned char)(x[3] >> 56)];
		y[1] = k[1] ^ IT[0][(unsigned char)x[1]] ^ IT[1][(unsigned char)(x[1] >> 8)] ^ IT[2][(unsigned char)(x[2] >> 16)] ^ IT[3][(unsigned char)(x[2] >> 24)] ^
			IT[4][(unsigned char)(x[3] >> 32)] ^ IT[5][(unsigned char)(x[3] >> 40)] ^ IT[6][(unsigned char)(x[0] >> 48)] ^ IT[7][(unsigned char)(x[0] >> 56)];
		y[2] = k[2] ^ IT[0][(unsigned char)x[2]] ^ IT[1][(unsigned char)(x[2] >> 8)] ^ IT[2][(unsigned char)(x[3] >> 16)] ^ IT[3][(unsigned char)(x[3] >> 24)] ^
			IT[4][(unsigned char)(x[0] >> 32)] ^ IT[5][(unsigned char)(x[0] >> 40)] ^ IT[6][(unsigned char)(x[1] >> 48)] ^ IT[7][(unsigned char)(x[1] >> 56)];
		y[3] = k[3] ^ IT[0][(unsigned char)x[3]] ^ IT[1][(unsigned char)(x[3] >> 8)] ^ IT[2][(unsigned char)(x[0] >> 16)] ^ IT[3][(unsigned char)(x[0] >> 24)] ^
			IT[4][(unsigned char)(x[1] >> 32)] ^ IT[5][(unsigned char)(x[1] >> 40)] ^ IT[6][(unsigned char)(x[2] >> 48)] ^ IT[7][(unsigned char)(x[2] >> 56)];
	}

	static inline void IGL256(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = (uint64_t(IS[0][(unsigned char)x[0]]) ^ uint64_t(IS[1][(unsigned char)(x[0] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[1] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[1] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[2] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[2] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[3] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[3] >> 56)]) << 56) - k[0];
		y[1] = (uint64_t(IS[0][(unsigned char)x[1]]) ^ uint64_t(IS[1][(unsigned char)(x[1] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[2] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[2] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[3] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[3] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[0] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[0] >> 56)]) << 56) - k[1];
		y[2] = (uint64_t(IS[0][(unsigned char)x[2]]) ^ uint64_t(IS[1][(unsigned char)(x[2] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[3] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[3] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[0] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[0] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[1] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[1] >> 56)]) << 56) - k[2];
		y[3] = (uint64_t(IS[0][(unsigned char)x[3]]) ^ uint64_t(IS[1][(unsigned char)(x[3] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[0] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[0] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[1] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[1] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[2] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[2] >> 56)]) << 56) - k[3];
	}

	static inline void add_constant256(uint64_t* src, uint64_t* dst, uint64_t constant)
	{
		for (int i = 0; i < 4; i++)
			dst[i] = src[i] + constant;
	}

	static inline void make_odd_key256(const uint64_t* evenkey, uint64_t* oddkey)
	{
		memcpy(oddkey, ((const unsigned char*)evenkey) + 11, 32 - 11);
		memcpy(((unsigned char*)oddkey) + 32 - 11, evenkey, 11);
	}

	bool kalyna256_512::init(const unsigned char* key, block_cipher::direction direction)
	{
		uint64_t ks[4], ksc[4], t1[4], t2[4], ka[4], ko[4], k[8];
		memset(t1, 0, sizeof(t1));
		t1[0] = (512 + 256 + 64) / 64;
		memcpy(ka, key, 32);
		memcpy(ko, key+32, 32);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("ks-0-t1[%d]: %016I64x\n", i, t1[i]);
#endif
		addkey256(t1, t2, ka);
		G256(t2, t1, ko);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("ks-0-r0[%d]: %016I64x\n", i, t1[i]);
#endif
		GL256(t1, t2, ka);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("ks-0-r1[%d]: %016I64x\n", i, t2[i]);
#endif
		G0256(t2, ks);

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("ks[%d]: %016I64x\n", i, ks[i]);
#endif

		uint64_t constant = 0x0001000100010001;

		// round 0
		memcpy(k, key, 512 / 8);
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[0], ksc);
		make_odd_key256(&rk[0], &rk[4]);

		// round 2
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k+4, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[8], ksc);
		make_odd_key256(&rk[8], &rk[12]);

		// round 4
		swap_block(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[16], ksc);
		make_odd_key256(&rk[16], &rk[20]);

		// round 6
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k+4, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[24], ksc);
		make_odd_key256(&rk[24], &rk[28]);

		// round 8
		swap_block(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[32], ksc);
		make_odd_key256(&rk[32], &rk[36]);

		// round 10
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k+4, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[40], ksc);
		make_odd_key256(&rk[40], &rk[44]);

		// round 12
		swap_block(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[48], ksc);
		make_odd_key256(&rk[48], &rk[52]);

		// round 14
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k+4, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[56], ksc);
		make_odd_key256(&rk[56], &rk[60]);

		// round 16
		swap_block(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[64], ksc);
		make_odd_key256(&rk[64], &rk[68]);

		// round 18
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k+4, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[72], ksc);

		if (direction == decryption)
		{
			IMC256(&rk[68]);
			IMC256(&rk[64]);
			IMC256(&rk[60]);
			IMC256(&rk[56]);
			IMC256(&rk[52]);
			IMC256(&rk[48]);
			IMC256(&rk[44]);
			IMC256(&rk[40]);
			IMC256(&rk[36]);
			IMC256(&rk[32]);
			IMC256(&rk[28]);
			IMC256(&rk[24]);
			IMC256(&rk[20]);
			IMC256(&rk[16]);
			IMC256(&rk[12]);
			IMC256(&rk[8]);
			IMC256(&rk[4]);
		}

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < sizeof(rk) / sizeof(*rk); i++)
			printf("rk[%d]: %016I64x\n", i, rk[i]);
#endif

		return true;
	}

	void kalyna256_512::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[4], t2[4];
		addkey256((const uint64_t*)in, t1, rk);

		G256(t1, t2, &rk[4]); // 1
		G256(t2, t1, &rk[8]); // 2
		G256(t1, t2, &rk[12]); // 3
		G256(t2, t1, &rk[16]); // 4
		G256(t1, t2, &rk[20]); // 5
		G256(t2, t1, &rk[24]); // 6
		G256(t1, t2, &rk[28]); // 7
		G256(t2, t1, &rk[32]); // 8
		G256(t1, t2, &rk[36]); // 9
		G256(t2, t1, &rk[40]); // 10
		G256(t1, t2, &rk[44]); // 11
		G256(t2, t1, &rk[48]); // 12
		G256(t1, t2, &rk[52]); // 13
		G256(t2, t1, &rk[56]); // 14
		G256(t1, t2, &rk[60]); // 15
		G256(t2, t1, &rk[64]); // 16
		G256(t1, t2, &rk[68]); // 17
		GL256(t2, t1, &rk[72]); // 18

		memcpy(out, t1, 256 / 8);
	}

	void kalyna256_512::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[4], t2[4];
		subkey256((const uint64_t*)in, t1, &rk[72]);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("subroundkey[%d]: %016I64x\n", i, t1[i]);
#endif

		IMC256(t1);
		IG256(t1, t2, &rk[68]);
		IG256(t2, t1, &rk[64]);
		IG256(t1, t2, &rk[60]);
		IG256(t2, t1, &rk[56]);
		IG256(t1, t2, &rk[52]);
		IG256(t2, t1, &rk[48]);
		IG256(t1, t2, &rk[44]);
		IG256(t2, t1, &rk[40]);
		IG256(t1, t2, &rk[36]);
		IG256(t2, t1, &rk[32]);
		IG256(t1, t2, &rk[28]);
		IG256(t2, t1, &rk[24]);
		IG256(t1, t2, &rk[20]);
		IG256(t2, t1, &rk[16]);
		IG256(t1, t2, &rk[12]);
		IG256(t2, t1, &rk[8]);
		IG256(t1, t2, &rk[4]);
		IGL256(t2, t1, &rk[0]);

		memcpy(out, t1, 256 / 8);
	}

	kalyna256_512::~kalyna256_512()
	{
		clear();
	}

	void kalyna256_512::clear()
	{
		zero_memory(rk, sizeof(rk));
	}

	static inline void swap_block256(uint64_t* k)
	{
		uint64_t t = k[0];
		k[0] = k[1];
		k[1] = k[2];
		k[2] = k[3];
		k[3] = t;
	}

	kalyna256_256::~kalyna256_256()
	{
		clear();
	}

	void kalyna256_256::clear()
	{
		zero_memory(rk, sizeof(rk));
	}

	bool kalyna256_256::init(const unsigned char* key, block_cipher::direction direction)
	{
		uint64_t ks[4], ksc[4], t1[4], t2[4], k[4];
		memset(t1, 0, sizeof(t1));
		t1[0] = (256 + 256 + 64) / 64;
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("ks-0-t1[%d]: %016I64x\n", i, t1[i]);
#endif
		addkey256(t1, t2, (const uint64_t*)key);
		G256(t2, t1, (const uint64_t*)key);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("ks-0-r0[%d]: %016I64x\n", i, t1[i]);
#endif
		GL256(t1, t2, (const uint64_t*)key);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("ks-0-r1[%d]: %016I64x\n", i, t2[i]);
#endif
		G0256(t2, ks);

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("ks[%d]: %016I64x\n", i, ks[i]);
#endif

		uint64_t constant = 0x0001000100010001;

		// round 0
		memcpy(k, key, 256 / 8);
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[0], ksc);
		make_odd_key256(&rk[0], &rk[4]);

		// round 2
		swap_block256(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[8], ksc);
		make_odd_key256(&rk[8], &rk[12]);

		// round 4
		swap_block256(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[16], ksc);
		make_odd_key256(&rk[16], &rk[20]);

		// round 6
		swap_block256(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[24], ksc);
		make_odd_key256(&rk[24], &rk[28]);

		// round 8
		swap_block256(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[32], ksc);
		make_odd_key256(&rk[32], &rk[36]);

		// round 10
		swap_block256(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[40], ksc);
		make_odd_key256(&rk[40], &rk[44]);

		// round 12
		swap_block256(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[48], ksc);
		make_odd_key256(&rk[48], &rk[52]);

		// round 14
		swap_block256(k);
		constant <<= 1;
		add_constant256(ks, ksc, constant);
		addkey256(k, t2, ksc);
		G256(t2, t1, ksc);
		GL256(t1, &rk[56], ksc);

		if (direction == decryption)
		{
			IMC256(&rk[52]);
			IMC256(&rk[48]);
			IMC256(&rk[44]);
			IMC256(&rk[40]);
			IMC256(&rk[36]);
			IMC256(&rk[32]);
			IMC256(&rk[28]);
			IMC256(&rk[24]);
			IMC256(&rk[20]);
			IMC256(&rk[16]);
			IMC256(&rk[12]);
			IMC256(&rk[8]);
			IMC256(&rk[4]);
		}

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < sizeof(rk) / sizeof(*rk); i++)
			printf("rk[%d]: %016I64x\n", i, rk[i]);
#endif

		return true;
	}

	void kalyna256_256::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[4], t2[4];
		addkey256((const uint64_t*)in, t1, rk);

		G256(t1, t2, &rk[4]); // 1
		G256(t2, t1, &rk[8]); // 2
		G256(t1, t2, &rk[12]); // 3
		G256(t2, t1, &rk[16]); // 4
		G256(t1, t2, &rk[20]); // 5
		G256(t2, t1, &rk[24]); // 6
		G256(t1, t2, &rk[28]); // 7
		G256(t2, t1, &rk[32]); // 8
		G256(t1, t2, &rk[36]); // 9
		G256(t2, t1, &rk[40]); // 10
		G256(t1, t2, &rk[44]); // 11
		G256(t2, t1, &rk[48]); // 12
		G256(t1, t2, &rk[52]); // 13
		GL256(t2, t1, &rk[56]); // 14

		memcpy(out, t1, 256 / 8);
	}

	void kalyna256_256::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[4], t2[4];
		subkey256((const uint64_t*)in, t1, &rk[56]);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 4; i++)
			printf("subroundkey[%d]: %016I64x\n", i, t1[i]);
#endif

		IMC256(t1);
		IG256(t1, t2, &rk[52]);
		IG256(t2, t1, &rk[48]);
		IG256(t1, t2, &rk[44]);
		IG256(t2, t1, &rk[40]);
		IG256(t1, t2, &rk[36]);
		IG256(t2, t1, &rk[32]);
		IG256(t1, t2, &rk[28]);
		IG256(t2, t1, &rk[24]);
		IG256(t1, t2, &rk[20]);
		IG256(t2, t1, &rk[16]);
		IG256(t1, t2, &rk[12]);
		IG256(t2, t1, &rk[8]);
		IG256(t1, t2, &rk[4]);
		IGL256(t2, t1, &rk[0]);

		memcpy(out, t1, 256 / 8);
	}

	static inline void addkey128(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = x[0] + k[0];
		y[1] = x[1] + k[1];
	}

	static inline void subkey128(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = x[0] - k[0];
		y[1] = x[1] - k[1];
	}

	static inline void G0128(const uint64_t* x, uint64_t* y)
	{
		y[0] = KUPYNA_T[0][(unsigned char)x[0]] ^ KUPYNA_T[1][(unsigned char)(x[0] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[0] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[0] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[1] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[1] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[1] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[1] >> 56)];
		y[1] = KUPYNA_T[0][(unsigned char)x[1]] ^ KUPYNA_T[1][(unsigned char)(x[1] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[1] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[1] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[0] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[0] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[0] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[0] >> 56)];
	}

	static inline void G128(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = k[0] ^ KUPYNA_T[0][(unsigned char)x[0]] ^ KUPYNA_T[1][(unsigned char)(x[0] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[0] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[0] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[1] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[1] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[1] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[1] >> 56)];
		y[1] = k[1] ^ KUPYNA_T[0][(unsigned char)x[1]] ^ KUPYNA_T[1][(unsigned char)(x[1] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[1] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[1] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[0] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[0] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[0] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[0] >> 56)];
	}

	static inline void GL128(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = k[0] + (KUPYNA_T[0][(unsigned char)x[0]] ^ KUPYNA_T[1][(unsigned char)(x[0] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[0] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[0] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[1] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[1] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[1] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[1] >> 56)]);
		y[1] = k[1] + (KUPYNA_T[0][(unsigned char)x[1]] ^ KUPYNA_T[1][(unsigned char)(x[1] >> 8)] ^ KUPYNA_T[2][(unsigned char)(x[1] >> 16)] ^ KUPYNA_T[3][(unsigned char)(x[1] >> 24)] ^
			KUPYNA_T[4][(unsigned char)(x[0] >> 32)] ^ KUPYNA_T[5][(unsigned char)(x[0] >> 40)] ^ KUPYNA_T[6][(unsigned char)(x[0] >> 48)] ^ KUPYNA_T[7][(unsigned char)(x[0] >> 56)]);
	}

	static inline void IMC128(uint64_t* x)
	{
		x[0] = IT[0][S[0][(unsigned char)x[0]]] ^ IT[1][S[1][(unsigned char)(x[0] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[0] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[0] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[0] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[0] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[0] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[0] >> 56)]];
		x[1] = IT[0][S[0][(unsigned char)x[1]]] ^ IT[1][S[1][(unsigned char)(x[1] >> 8)]] ^ IT[2][S[2][(unsigned char)(x[1] >> 16)]] ^ IT[3][S[3][(unsigned char)(x[1] >> 24)]] ^
			IT[4][S[0][(unsigned char)(x[1] >> 32)]] ^ IT[5][S[1][(unsigned char)(x[1] >> 40)]] ^ IT[6][S[2][(unsigned char)(x[1] >> 48)]] ^ IT[7][S[3][(unsigned char)(x[1] >> 56)]];
	}

	static inline void IG128(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = k[0] ^ IT[0][(unsigned char)x[0]] ^ IT[1][(unsigned char)(x[0] >> 8)] ^ IT[2][(unsigned char)(x[0] >> 16)] ^ IT[3][(unsigned char)(x[0] >> 24)] ^
			IT[4][(unsigned char)(x[1] >> 32)] ^ IT[5][(unsigned char)(x[1] >> 40)] ^ IT[6][(unsigned char)(x[1] >> 48)] ^ IT[7][(unsigned char)(x[1] >> 56)];
		y[1] = k[1] ^ IT[0][(unsigned char)x[1]] ^ IT[1][(unsigned char)(x[1] >> 8)] ^ IT[2][(unsigned char)(x[1] >> 16)] ^ IT[3][(unsigned char)(x[1] >> 24)] ^
			IT[4][(unsigned char)(x[0] >> 32)] ^ IT[5][(unsigned char)(x[0] >> 40)] ^ IT[6][(unsigned char)(x[0] >> 48)] ^ IT[7][(unsigned char)(x[0] >> 56)];
	}

	static inline void IGL128(const uint64_t* x, uint64_t* y, const uint64_t* k)
	{
		y[0] = (uint64_t(IS[0][(unsigned char)x[0]]) ^ uint64_t(IS[1][(unsigned char)(x[0] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[0] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[0] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[1] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[1] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[1] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[1] >> 56)]) << 56) - k[0];
		y[1] = (uint64_t(IS[0][(unsigned char)x[1]]) ^ uint64_t(IS[1][(unsigned char)(x[1] >> 8)]) << 8 ^ uint64_t(IS[2][(unsigned char)(x[1] >> 16)]) << 16 ^ uint64_t(IS[3][(unsigned char)(x[1] >> 24)]) << 24 ^
			uint64_t(IS[0][(unsigned char)(x[0] >> 32)]) << 32 ^ uint64_t(IS[1][(unsigned char)(x[0] >> 40)]) << 40 ^ uint64_t(IS[2][(unsigned char)(x[0] >> 48)]) << 48 ^ uint64_t(IS[3][(unsigned char)(x[0] >> 56)]) << 56) - k[1];
	}

	static inline void add_constant128(uint64_t* src, uint64_t* dst, uint64_t constant)
	{
		for (int i = 0; i < 2; i++)
			dst[i] = src[i] + constant;
	}

	static inline void make_odd_key128(const uint64_t* evenkey, uint64_t* oddkey)
	{
		memcpy(oddkey, ((const unsigned char*)evenkey) + 7, 16 - 7);
		memcpy(((unsigned char*)oddkey) + 16 - 7, evenkey, 7);
	}

	kalyna128_256::~kalyna128_256()
	{
		clear();
	}

	void kalyna128_256::clear()
	{
		zero_memory(rk, sizeof(rk));
	}

	void kalyna128_256::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[2], t2[2];
		addkey128((const uint64_t*)in, t1, rk);

		G128(t1, t2, &rk[2]); // 1
		G128(t2, t1, &rk[4]); // 2
		G128(t1, t2, &rk[6]); // 3
		G128(t2, t1, &rk[8]); // 4
		G128(t1, t2, &rk[10]); // 5
		G128(t2, t1, &rk[12]); // 6
		G128(t1, t2, &rk[14]); // 7
		G128(t2, t1, &rk[16]); // 8
		G128(t1, t2, &rk[18]); // 9
		G128(t2, t1, &rk[20]); // 10
		G128(t1, t2, &rk[22]); // 11
		G128(t2, t1, &rk[24]); // 12
		G128(t1, t2, &rk[26]); // 13
		GL128(t2, t1, &rk[28]); // 14

		memcpy(out, t1, 128 / 8);
	}

	void kalyna128_256::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[2], t2[2];
		subkey128((const uint64_t*)in, t1, &rk[28]);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("subroundkey[%d]: %016I64x\n", i, t1[i]);
#endif

		IMC128(t1);
		IG128(t1, t2, &rk[26]);
		IG128(t2, t1, &rk[24]);
		IG128(t1, t2, &rk[22]);
		IG128(t2, t1, &rk[20]);
		IG128(t1, t2, &rk[18]);
		IG128(t2, t1, &rk[16]);
		IG128(t1, t2, &rk[14]);
		IG128(t2, t1, &rk[12]);
		IG128(t1, t2, &rk[10]);
		IG128(t2, t1, &rk[8]);
		IG128(t1, t2, &rk[6]);
		IG128(t2, t1, &rk[4]);
		IG128(t1, t2, &rk[2]);
		IGL128(t2, t1, &rk[0]);

		memcpy(out, t1, 128 / 8);
	}

	bool kalyna128_256::init(const unsigned char* key, block_cipher::direction direction)
	{
		uint64_t ks[2], ksc[2], t1[2], t2[2], ka[2], ko[2], k[4];
		memset(t1, 0, sizeof(t1));
		t1[0] = (128 + 256 + 64) / 64;
		memcpy(ka, key, 16);
		memcpy(ko, key + 16, 16);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("ks-0-t1[%d]: %016I64x\n", i, t1[i]);
#endif
		addkey128(t1, t2, ka);
		G128(t2, t1, ko);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("ks-0-r0[%d]: %016I64x\n", i, t1[i]);
#endif
		GL128(t1, t2, ka);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("ks-0-r1[%d]: %016I64x\n", i, t2[i]);
#endif
		G0128(t2, ks);

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("ks[%d]: %016I64x\n", i, ks[i]);
#endif

		uint64_t constant = 0x0001000100010001;

		// round 0
		memcpy(k, key, 256 / 8);
		add_constant128(ks, ksc, constant);
		addkey128(k, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[0], ksc);
		make_odd_key128(&rk[0], &rk[2]);

		// round 2
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(k + 2, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[4], ksc);
		make_odd_key128(&rk[4], &rk[6]);

		// round 4
		swap_block256(k);
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(k, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[8], ksc);
		make_odd_key128(&rk[8], &rk[10]);

		// round 6
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(k + 2, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[12], ksc);
		make_odd_key128(&rk[12], &rk[14]);

		// round 8
		swap_block256(k);
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(k, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[16], ksc);
		make_odd_key128(&rk[16], &rk[18]);

		// round 10
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(k + 2, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[20], ksc);
		make_odd_key128(&rk[20], &rk[22]);

		// round 12
		swap_block256(k);
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(k, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[24], ksc);
		make_odd_key128(&rk[24], &rk[26]);

		// round 14
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(k + 2, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[28], ksc);

		if (direction == decryption)
		{
			IMC128(&rk[26]);
			IMC128(&rk[24]);
			IMC128(&rk[22]);
			IMC128(&rk[20]);
			IMC128(&rk[18]);
			IMC128(&rk[16]);
			IMC128(&rk[14]);
			IMC128(&rk[12]);
			IMC128(&rk[10]);
			IMC128(&rk[8]);
			IMC128(&rk[6]);
			IMC128(&rk[4]);
			IMC128(&rk[2]);
		}

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < sizeof(rk) / sizeof(*rk); i++)
			printf("rk[%d]: %016I64x\n", i, rk[i]);
#endif

		return true;
	}

	kalyna128_128::~kalyna128_128()
	{
		clear();
	}

	void kalyna128_128::clear()
	{
		zero_memory(rk, sizeof(rk));
	}

	void kalyna128_128::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[2], t2[2];
		addkey128((const uint64_t*)in, t1, rk);
		G128(t1, t2, &rk[2]); // 1
		G128(t2, t1, &rk[4]); // 2
		G128(t1, t2, &rk[6]); // 3
		G128(t2, t1, &rk[8]); // 4
		G128(t1, t2, &rk[10]); // 5
		G128(t2, t1, &rk[12]); // 6
		G128(t1, t2, &rk[14]); // 7
		G128(t2, t1, &rk[16]); // 8
		G128(t1, t2, &rk[18]); // 9
		GL128(t2, t1, &rk[20]); // 10

		memcpy(out, t1, 128 / 8);
	}

	void kalyna128_128::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		uint64_t t1[2], t2[2];
		subkey128((const uint64_t*)in, t1, &rk[20]);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("subroundkey[%d]: %016I64x\n", i, t1[i]);
#endif

		IMC128(t1);
		IG128(t1, t2, &rk[18]);
		IG128(t2, t1, &rk[16]);
		IG128(t1, t2, &rk[14]);
		IG128(t2, t1, &rk[12]);
		IG128(t1, t2, &rk[10]);
		IG128(t2, t1, &rk[8]);
		IG128(t1, t2, &rk[6]);
		IG128(t2, t1, &rk[4]);
		IG128(t1, t2, &rk[2]);
		IGL128(t2, t1, &rk[0]);

		memcpy(out, t1, 128 / 8);
	}

	bool kalyna128_128::init(const unsigned char* key, block_cipher::direction direction)
	{
		uint64_t ks[2], ksc[2], t1[2], t2[2], k[2], kswapped[2];
		memset(t1, 0, sizeof(t1));
		t1[0] = (128 + 128 + 64) / 64;
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("ks-0-t1[%d]: %016I64x\n", i, t1[i]);
#endif
		addkey128(t1, t2, (const uint64_t*)key);
		G128(t2, t1, (const uint64_t*)key);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("ks-0-r0[%d]: %016I64x\n", i, t1[i]);
#endif
		GL128(t1, t2, (const uint64_t*)key);
#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("ks-0-r1[%d]: %016I64x\n", i, t2[i]);
#endif
		G0128(t2, ks);

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < 2; i++)
			printf("ks[%d]: %016I64x\n", i, ks[i]);
#endif

		uint64_t constant = 0x0001000100010001;

		// round 0
		memcpy(k, key, 128 / 8);
		kswapped[1] = k[0];
		kswapped[0] = k[1];

		add_constant128(ks, ksc, constant);
		addkey128(k, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[0], ksc);
		make_odd_key128(&rk[0], &rk[2]);

		// round 2
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(kswapped, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[4], ksc);
		make_odd_key128(&rk[4], &rk[6]);

		// round 4
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(k, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[8], ksc);
		make_odd_key128(&rk[8], &rk[10]);

		// round 6
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(kswapped, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[12], ksc);
		make_odd_key128(&rk[12], &rk[14]);

		// round 8
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(k, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[16], ksc);
		make_odd_key128(&rk[16], &rk[18]);

		// round 10
		constant <<= 1;
		add_constant128(ks, ksc, constant);
		addkey128(kswapped, t2, ksc);
		G128(t2, t1, ksc);
		GL128(t1, &rk[20], ksc);

		if (direction == decryption)
		{
			IMC128(&rk[18]);
			IMC128(&rk[16]);
			IMC128(&rk[14]);
			IMC128(&rk[12]);
			IMC128(&rk[10]);
			IMC128(&rk[8]);
			IMC128(&rk[6]);
			IMC128(&rk[4]);
			IMC128(&rk[2]);
		}

#ifdef CPPCRYPTO_DEBUG
		for (int i = 0; i < sizeof(rk) / sizeof(*rk); i++)
			printf("rk[%d]: %016I64x\n", i, rk[i]);
#endif

		return true;
	}

}

